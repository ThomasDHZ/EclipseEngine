#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_scalar_block_layout : enable

#include "RTXPayload.glsl"
#include "Vertex.glsl"
#include "MeshProperties.glsl"
#include "MaterialProperties.glsl"
#include "GLTFLights.glsl"
#include "SceneData.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D RayTracedTexture;
layout(binding = 2, scalar) buffer Vertices { Vertex v[]; } vertices[];
layout(binding = 3) buffer Indices { uint i[]; } indices[];
layout(binding = 4) buffer MeshPropertiesBuffer { MeshProperties meshProperties; } meshBuffer[];
layout(binding = 5) buffer TransformBuffer { mat4 transform; } transformBuffer[];
layout(binding = 6) buffer MaterialPropertiesBuffer { MaterialProperties materialProperties; } materialBuffer[];
layout(binding = 7) uniform sampler2D TextureMap[];
layout(binding = 8) uniform sampler2D BRDFMap;
layout(binding = 9) uniform samplerCube IrradianceMap;
layout(binding = 10) uniform samplerCube PrefilterMap;
layout(binding = 11) buffer SunLightBuffer { SunLight sunLight; } SULight[];
layout(binding = 12) buffer DirectionalLightBuffer { DirectionalLight directionalLight; } DLight[];
layout(binding = 13) buffer PointLightBuffer { PointLight pointLight; } PLight[];
layout(binding = 14) buffer SpotLightBuffer { SpotLight spotLight; } SLight[];

layout(location = 0) rayPayloadEXT RayPayload rayPayload;


void main() 
{
		const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
		const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
		vec2 d = inUV * 2.0 - 1.0;

		vec4 origin = sceneData.view * vec4(0,0,0,1);
		vec4 target = sceneData.proj * vec4(d.x, d.y, 1, 1) ;
		vec4 direction = sceneData.view*vec4(normalize(target.xyz / target.w), 0);

		uint rayFlags = gl_RayFlagsOpaqueEXT;
		uint cullMask = 0xff;
		float tmin = 0.001;
		float tmax = 10000.0;

		rayPayload.color = vec3(1.0f);
		rayPayload.reflectCount = 1;
		rayPayload.reflectCount2 = 1;

		vec3 BaseColor = vec3(0.0f);
		vec3 finalColor = vec3(0.0f);
		traceRayEXT(topLevelAS, gl_RayFlagsNoneEXT, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);

    vec3 finalResult = rayPayload.color / (rayPayload.color + vec3(1.0f));
    finalResult = pow(finalResult, vec3(1.0f/2.2f)); 

    imageStore(RayTracedTexture, ivec2(gl_LaunchIDEXT.xy),  vec4(finalResult, 1.0));
}