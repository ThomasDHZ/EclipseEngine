#pragma once
#include "VulkanPipelineTools.h"
#ifndef VulkanMenu
#define VulkanMenu

namespace VulkanMenu
{
	enum PipelineRenderType
	{
		kPipelineModelRenderer,
		kPipelineInstanceRenderer,
		kPipelineSpriteRenderer,
		kPipelineLineRenderer2D,
		kPipelineLineRenderer3D,
		kPipelineWireFrameRender,
		kPipelineSkyboxRenderer
	};

	const char* PipelineTypeEnumList[7] = { "kPipelineModelRenderer",
													"kPipelineInstanceRenderer",
													"kPipelineSpriteRenderer",
													"kPipelineLineRenderer2D",
													"kPipelineLineRenderer3D",
													"kPipelineWireFrameRender",
													"kPipelineSkyboxRenderer" };

	struct PipelineRenderTypeConverter
	{
		static const char* SelectionToString(PipelineRenderType input)
		{
			switch (input)
			{
			case kPipelineModelRenderer: return "kPipelineModelRenderer"; break;
			case kPipelineInstanceRenderer: return "kPipelineInstanceRenderer"; break;
			case kPipelineSpriteRenderer: return "kPipelineSpriteRenderer"; break;
			case kPipelineLineRenderer2D: return "kPipelineLineRenderer2D"; break;
			case kPipelineLineRenderer3D: return "kPipelineLineRenderer3D"; break;
			case kPipelineWireFrameRender: return "kPipelineWireFrameRender"; break;
			case kPipelineSkyboxRenderer: return "kPipelineSkyboxRenderer"; break;
			default: return "";
			}
		}

		static PipelineRenderType SelectionToEnum(std::string input)
		{
			if (input == "kPipelineModelRenderer") return kPipelineModelRenderer;
			if (input == "kPipelineInstanceRenderer") return kPipelineInstanceRenderer;
			if (input == "kPipelineSpriteRenderer") return kPipelineSpriteRenderer;
			if (input == "kPipelineLineRenderer2D") return kPipelineLineRenderer2D;
			if (input == "kPipelineLineRenderer3D") return kPipelineLineRenderer3D;
			if (input == "kPipelineWireFrameRender") return kPipelineWireFrameRender;
			if (input == "kPipelineSkyboxRenderer") return kPipelineSkyboxRenderer;
		}
	};

	const char* VkBlendOpEnumList[52]{
"VK_BLEND_OP_ADD",
"VK_BLEND_OP_SUBTRACT",
"VK_BLEND_OP_REVERSE_SUBTRACT",
"VK_BLEND_OP_MIN",
"VK_BLEND_OP_MAX",
"VK_BLEND_OP_ZERO_EXT",
"VK_BLEND_OP_SRC_EXT",
"VK_BLEND_OP_DST_EXT",
"VK_BLEND_OP_SRC_OVER_EXT",
"VK_BLEND_OP_DST_OVER_EXT",
"VK_BLEND_OP_SRC_IN_EXT",
"VK_BLEND_OP_DST_IN_EXT",
"VK_BLEND_OP_SRC_OUT_EXT",
"VK_BLEND_OP_DST_OUT_EXT",
"VK_BLEND_OP_SRC_ATOP_EXT",
"VK_BLEND_OP_DST_ATOP_EXT",
"VK_BLEND_OP_XOR_EXT",
"VK_BLEND_OP_MULTIPLY_EXT",
"VK_BLEND_OP_SCREEN_EXT",
"VK_BLEND_OP_OVERLAY_EXT",
"VK_BLEND_OP_DARKEN_EXT",
"VK_BLEND_OP_LIGHTEN_EXT",
"VK_BLEND_OP_COLORDODGE_EXT",
"VK_BLEND_OP_COLORBURN_EXT",
"VK_BLEND_OP_HARDLIGHT_EXT",
"VK_BLEND_OP_SOFTLIGHT_EXT",
"VK_BLEND_OP_DIFFERENCE_EXT",
"VK_BLEND_OP_EXCLUSION_EXT",
"VK_BLEND_OP_INVERT_EXT",
"VK_BLEND_OP_INVERT_RGB_EXT",
"VK_BLEND_OP_LINEARDODGE_EXT",
"VK_BLEND_OP_LINEARBURN_EXT",
"VK_BLEND_OP_VIVIDLIGHT_EXT",
"VK_BLEND_OP_LINEARLIGHT_EXT",
"VK_BLEND_OP_PINLIGHT_EXT",
"VK_BLEND_OP_HARDMIX_EXT",
"VK_BLEND_OP_HSL_HUE_EXT",
"VK_BLEND_OP_HSL_SATURATION_EXT",
"VK_BLEND_OP_HSL_COLOR_EXT",
"VK_BLEND_OP_HSL_LUMINOSITY_EXT",
"VK_BLEND_OP_PLUS_EXT",
"VK_BLEND_OP_PLUS_CLAMPED_EXT",
"VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT",
"VK_BLEND_OP_PLUS_DARKER_EXT",
"VK_BLEND_OP_MINUS_EXT",
"VK_BLEND_OP_MINUS_CLAMPED_EXT",
"VK_BLEND_OP_CONTRAST_EXT",
"VK_BLEND_OP_INVERT_OVG_EXT",
"VK_BLEND_OP_RED_EXT",
"VK_BLEND_OP_GREEN_EXT",
"VK_BLEND_OP_BLUE_EXT",
"VK_BLEND_OP_MAX_ENUM",
	};

	struct VkBlendOpConverter
	{
		static const char* SelectionToString(VkBlendOp input)
		{
			switch (input)
			{
			case VK_BLEND_OP_ADD: return "VK_BLEND_OP_ADD"; break;
			case VK_BLEND_OP_SUBTRACT: return "VK_BLEND_OP_SUBTRACT"; break;
			case VK_BLEND_OP_REVERSE_SUBTRACT: return "VK_BLEND_OP_REVERSE_SUBTRACT"; break;
			case VK_BLEND_OP_MIN: return "VK_BLEND_OP_MIN"; break;
			case VK_BLEND_OP_MAX: return "VK_BLEND_OP_MAX"; break;
			case VK_BLEND_OP_ZERO_EXT: return "VK_BLEND_OP_ZERO_EXT"; break;
			case VK_BLEND_OP_SRC_EXT: return "VK_BLEND_OP_SRC_EXT"; break;
			case VK_BLEND_OP_DST_EXT: return "VK_BLEND_OP_DST_EXT"; break;
			case VK_BLEND_OP_SRC_OVER_EXT: return "VK_BLEND_OP_SRC_OVER_EXT"; break;
			case VK_BLEND_OP_DST_OVER_EXT: return "VK_BLEND_OP_DST_OVER_EXT"; break;
			case VK_BLEND_OP_SRC_IN_EXT: return "VK_BLEND_OP_SRC_IN_EXT"; break;
			case VK_BLEND_OP_DST_IN_EXT: return "VK_BLEND_OP_DST_IN_EXT"; break;
			case VK_BLEND_OP_SRC_OUT_EXT: return "VK_BLEND_OP_SRC_OUT_EXT"; break;
			case VK_BLEND_OP_DST_OUT_EXT: return "VK_BLEND_OP_DST_OUT_EXT"; break;
			case VK_BLEND_OP_SRC_ATOP_EXT: return "VK_BLEND_OP_SRC_ATOP_EXT"; break;
			case VK_BLEND_OP_DST_ATOP_EXT: return "VK_BLEND_OP_DST_ATOP_EXT"; break;
			case VK_BLEND_OP_XOR_EXT: return "VK_BLEND_OP_XOR_EXT"; break;
			case VK_BLEND_OP_MULTIPLY_EXT: return "VK_BLEND_OP_MULTIPLY_EXT"; break;
			case VK_BLEND_OP_SCREEN_EXT: return "VK_BLEND_OP_SCREEN_EXT"; break;
			case VK_BLEND_OP_OVERLAY_EXT: return "VK_BLEND_OP_OVERLAY_EXT"; break;
			case VK_BLEND_OP_DARKEN_EXT: return "VK_BLEND_OP_DARKEN_EXT"; break;
			case VK_BLEND_OP_LIGHTEN_EXT: return "VK_BLEND_OP_LIGHTEN_EXT"; break;
			case VK_BLEND_OP_COLORDODGE_EXT: return "VK_BLEND_OP_COLORDODGE_EXT"; break;
			case VK_BLEND_OP_COLORBURN_EXT: return "VK_BLEND_OP_COLORBURN_EXT"; break;
			case VK_BLEND_OP_HARDLIGHT_EXT: return "VK_BLEND_OP_HARDLIGHT_EXT"; break;
			case VK_BLEND_OP_SOFTLIGHT_EXT: return "VK_BLEND_OP_SOFTLIGHT_EXT"; break;
			case VK_BLEND_OP_DIFFERENCE_EXT: return "VK_BLEND_OP_DIFFERENCE_EXT"; break;
			case VK_BLEND_OP_EXCLUSION_EXT: return "VK_BLEND_OP_EXCLUSION_EXT"; break;
			case VK_BLEND_OP_INVERT_EXT: return "VK_BLEND_OP_INVERT_EXT"; break;
			case VK_BLEND_OP_INVERT_RGB_EXT: return "VK_BLEND_OP_INVERT_RGB_EXT"; break;
			case VK_BLEND_OP_LINEARDODGE_EXT: return "VK_BLEND_OP_LINEARDODGE_EXT"; break;
			case VK_BLEND_OP_LINEARBURN_EXT: return "VK_BLEND_OP_LINEARBURN_EXT"; break;
			case VK_BLEND_OP_VIVIDLIGHT_EXT: return "VK_BLEND_OP_VIVIDLIGHT_EXT"; break;
			case VK_BLEND_OP_LINEARLIGHT_EXT: return "VK_BLEND_OP_LINEARLIGHT_EXT"; break;
			case VK_BLEND_OP_PINLIGHT_EXT: return "VK_BLEND_OP_PINLIGHT_EXT"; break;
			case VK_BLEND_OP_HARDMIX_EXT: return "VK_BLEND_OP_HARDMIX_EXT"; break;
			case VK_BLEND_OP_HSL_HUE_EXT: return "VK_BLEND_OP_HSL_HUE_EXT"; break;
			case VK_BLEND_OP_HSL_SATURATION_EXT: return "VK_BLEND_OP_HSL_SATURATION_EXT"; break;
			case VK_BLEND_OP_HSL_COLOR_EXT: return "VK_BLEND_OP_HSL_COLOR_EXT"; break;
			case VK_BLEND_OP_HSL_LUMINOSITY_EXT: return "VK_BLEND_OP_HSL_LUMINOSITY_EXT"; break;
			case VK_BLEND_OP_PLUS_EXT: return "VK_BLEND_OP_PLUS_EXT"; break;
			case VK_BLEND_OP_PLUS_CLAMPED_EXT: return "VK_BLEND_OP_PLUS_CLAMPED_EXT"; break;
			case VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT: return "VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT"; break;
			case VK_BLEND_OP_PLUS_DARKER_EXT: return "VK_BLEND_OP_PLUS_DARKER_EXT"; break;
			case VK_BLEND_OP_MINUS_EXT: return "VK_BLEND_OP_MINUS_EXT"; break;
			case VK_BLEND_OP_MINUS_CLAMPED_EXT: return "VK_BLEND_OP_MINUS_CLAMPED_EXT"; break;
			case VK_BLEND_OP_CONTRAST_EXT: return "VK_BLEND_OP_CONTRAST_EXT"; break;
			case VK_BLEND_OP_INVERT_OVG_EXT: return "VK_BLEND_OP_INVERT_OVG_EXT"; break;
			case VK_BLEND_OP_RED_EXT: return "VK_BLEND_OP_RED_EXT"; break;
			case VK_BLEND_OP_GREEN_EXT: return "VK_BLEND_OP_GREEN_EXT"; break;
			case VK_BLEND_OP_BLUE_EXT: return "VK_BLEND_OP_BLUE_EXT"; break;
			case VK_BLEND_OP_MAX_ENUM: return "VK_BLEND_OP_MAX_ENUM"; break;
			}
		}

		static VkBlendOp SelectionToEnum(std::string input)
		{
			{
				if (input == "VK_BLEND_OP_ADD") return VK_BLEND_OP_ADD;
				if (input == "VK_BLEND_OP_SUBTRACT") return VK_BLEND_OP_SUBTRACT;
				if (input == "VK_BLEND_OP_REVERSE_SUBTRACT") return VK_BLEND_OP_REVERSE_SUBTRACT;
				if (input == "VK_BLEND_OP_MIN") return VK_BLEND_OP_MIN;
				if (input == "VK_BLEND_OP_MAX") return VK_BLEND_OP_MAX;
				if (input == "VK_BLEND_OP_ZERO_EXT") return VK_BLEND_OP_ZERO_EXT;
				if (input == "VK_BLEND_OP_SRC_EXT") return VK_BLEND_OP_SRC_EXT;
				if (input == "VK_BLEND_OP_DST_EXT") return VK_BLEND_OP_DST_EXT;
				if (input == "VK_BLEND_OP_SRC_OVER_EXT") return VK_BLEND_OP_SRC_OVER_EXT;
				if (input == "VK_BLEND_OP_DST_OVER_EXT") return VK_BLEND_OP_DST_OVER_EXT;
				if (input == "VK_BLEND_OP_SRC_IN_EXT") return VK_BLEND_OP_SRC_IN_EXT;
				if (input == "VK_BLEND_OP_DST_IN_EXT") return VK_BLEND_OP_DST_IN_EXT;
				if (input == "VK_BLEND_OP_SRC_OUT_EXT") return VK_BLEND_OP_SRC_OUT_EXT;
				if (input == "VK_BLEND_OP_DST_OUT_EXT") return VK_BLEND_OP_DST_OUT_EXT;
				if (input == "VK_BLEND_OP_SRC_ATOP_EXT") return VK_BLEND_OP_SRC_ATOP_EXT;
				if (input == "VK_BLEND_OP_DST_ATOP_EXT") return VK_BLEND_OP_DST_ATOP_EXT;
				if (input == "VK_BLEND_OP_XOR_EXT") return VK_BLEND_OP_XOR_EXT;
				if (input == "VK_BLEND_OP_MULTIPLY_EXT") return VK_BLEND_OP_MULTIPLY_EXT;
				if (input == "VK_BLEND_OP_SCREEN_EXT") return VK_BLEND_OP_SCREEN_EXT;
				if (input == "VK_BLEND_OP_OVERLAY_EXT") return VK_BLEND_OP_OVERLAY_EXT;
				if (input == "VK_BLEND_OP_DARKEN_EXT") return VK_BLEND_OP_DARKEN_EXT;
				if (input == "VK_BLEND_OP_LIGHTEN_EXT") return VK_BLEND_OP_LIGHTEN_EXT;
				if (input == "VK_BLEND_OP_COLORDODGE_EXT") return VK_BLEND_OP_COLORDODGE_EXT;
				if (input == "VK_BLEND_OP_COLORBURN_EXT") return VK_BLEND_OP_COLORBURN_EXT;
				if (input == "VK_BLEND_OP_HARDLIGHT_EXT") return VK_BLEND_OP_HARDLIGHT_EXT;
				if (input == "VK_BLEND_OP_SOFTLIGHT_EXT") return VK_BLEND_OP_SOFTLIGHT_EXT;
				if (input == "VK_BLEND_OP_DIFFERENCE_EXT") return VK_BLEND_OP_DIFFERENCE_EXT;
				if (input == "VK_BLEND_OP_EXCLUSION_EXT") return VK_BLEND_OP_EXCLUSION_EXT;
				if (input == "VK_BLEND_OP_INVERT_EXT") return VK_BLEND_OP_INVERT_EXT;
				if (input == "VK_BLEND_OP_INVERT_RGB_EXT") return VK_BLEND_OP_INVERT_RGB_EXT;
				if (input == "VK_BLEND_OP_LINEARDODGE_EXT") return VK_BLEND_OP_LINEARDODGE_EXT;
				if (input == "VK_BLEND_OP_LINEARBURN_EXT") return VK_BLEND_OP_LINEARBURN_EXT;
				if (input == "VK_BLEND_OP_VIVIDLIGHT_EXT") return VK_BLEND_OP_VIVIDLIGHT_EXT;
				if (input == "VK_BLEND_OP_LINEARLIGHT_EXT") return VK_BLEND_OP_LINEARLIGHT_EXT;
				if (input == "VK_BLEND_OP_PINLIGHT_EXT") return VK_BLEND_OP_PINLIGHT_EXT;
				if (input == "VK_BLEND_OP_HARDMIX_EXT") return VK_BLEND_OP_HARDMIX_EXT;
				if (input == "VK_BLEND_OP_HSL_HUE_EXT") return VK_BLEND_OP_HSL_HUE_EXT;
				if (input == "VK_BLEND_OP_HSL_SATURATION_EXT") return VK_BLEND_OP_HSL_SATURATION_EXT;
				if (input == "VK_BLEND_OP_HSL_COLOR_EXT") return VK_BLEND_OP_HSL_COLOR_EXT;
				if (input == "VK_BLEND_OP_HSL_LUMINOSITY_EXT") return VK_BLEND_OP_HSL_LUMINOSITY_EXT;
				if (input == "VK_BLEND_OP_PLUS_EXT") return VK_BLEND_OP_PLUS_EXT;
				if (input == "VK_BLEND_OP_PLUS_CLAMPED_EXT") return VK_BLEND_OP_PLUS_CLAMPED_EXT;
				if (input == "VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT") return VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT;
				if (input == "VK_BLEND_OP_PLUS_DARKER_EXT") return VK_BLEND_OP_PLUS_DARKER_EXT;
				if (input == "VK_BLEND_OP_MINUS_EXT") return VK_BLEND_OP_MINUS_EXT;
				if (input == "VK_BLEND_OP_MINUS_CLAMPED_EXT") return VK_BLEND_OP_MINUS_CLAMPED_EXT;
				if (input == "VK_BLEND_OP_CONTRAST_EXT") return VK_BLEND_OP_CONTRAST_EXT;
				if (input == "VK_BLEND_OP_INVERT_OVG_EXT") return VK_BLEND_OP_INVERT_OVG_EXT;
				if (input == "VK_BLEND_OP_RED_EXT") return VK_BLEND_OP_RED_EXT;
				if (input == "VK_BLEND_OP_GREEN_EXT") return VK_BLEND_OP_GREEN_EXT;
				if (input == "VK_BLEND_OP_BLUE_EXT") return VK_BLEND_OP_BLUE_EXT;
				if (input == "VK_BLEND_OP_MAX_ENUM") return VK_BLEND_OP_MAX_ENUM;
			}
		};
	};


	const char* VkBlendFactorEnumList[20]{
"VK_BLEND_FACTOR_ZERO",
"VK_BLEND_FACTOR_ONE",
"VK_BLEND_FACTOR_SRC_COLOR",
"VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR",
"VK_BLEND_FACTOR_DST_COLOR",
"VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR",
"VK_BLEND_FACTOR_SRC_ALPHA",
"VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA",
"VK_BLEND_FACTOR_DST_ALPHA",
"VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA",
"VK_BLEND_FACTOR_CONSTANT_COLOR",
"VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR",
"VK_BLEND_FACTOR_CONSTANT_ALPHA",
"VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA",
"VK_BLEND_FACTOR_SRC_ALPHA_SATURATE",
"VK_BLEND_FACTOR_SRC1_COLOR",
"VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR",
"VK_BLEND_FACTOR_SRC1_ALPHA",
"VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA",
"VK_BLEND_FACTOR_MAX_ENUM",
	};

	struct VkBlendFactorConverter
	{
		static const char* SelectionToString(VkBlendFactor input)
		{
			switch (input)
			{
			case VK_BLEND_FACTOR_ZERO: return "VK_BLEND_FACTOR_ZERO"; break;
			case VK_BLEND_FACTOR_ONE: return "VK_BLEND_FACTOR_ONE"; break;
			case VK_BLEND_FACTOR_SRC_COLOR: return "VK_BLEND_FACTOR_SRC_COLOR"; break;
			case VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR: return "VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR"; break;
			case VK_BLEND_FACTOR_DST_COLOR: return "VK_BLEND_FACTOR_DST_COLOR"; break;
			case VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR: return "VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR"; break;
			case VK_BLEND_FACTOR_SRC_ALPHA: return "VK_BLEND_FACTOR_SRC_ALPHA"; break;
			case VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA: return "VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA"; break;
			case VK_BLEND_FACTOR_DST_ALPHA: return "VK_BLEND_FACTOR_DST_ALPHA"; break;
			case VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA: return "VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA"; break;
			case VK_BLEND_FACTOR_CONSTANT_COLOR: return "VK_BLEND_FACTOR_CONSTANT_COLOR"; break;
			case VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR: return "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR"; break;
			case VK_BLEND_FACTOR_CONSTANT_ALPHA: return "VK_BLEND_FACTOR_CONSTANT_ALPHA"; break;
			case VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA: return "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA"; break;
			case VK_BLEND_FACTOR_SRC_ALPHA_SATURATE: return "VK_BLEND_FACTOR_SRC_ALPHA_SATURATE"; break;
			case VK_BLEND_FACTOR_SRC1_COLOR: return "VK_BLEND_FACTOR_SRC1_COLOR"; break;
			case VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR: return "VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR"; break;
			case VK_BLEND_FACTOR_SRC1_ALPHA: return "VK_BLEND_FACTOR_SRC1_ALPHA"; break;
			case VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA: return "VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA"; break;
			case VK_BLEND_FACTOR_MAX_ENUM: return "VK_BLEND_FACTOR_MAX_ENUM"; break;
			}
		}

		static VkBlendFactor SelectionToEnum(std::string input)
		{
			{
				if (input == "VK_BLEND_FACTOR_ZERO") return VK_BLEND_FACTOR_ZERO;
				if (input == "VK_BLEND_FACTOR_ONE") return VK_BLEND_FACTOR_ONE;
				if (input == "VK_BLEND_FACTOR_SRC_COLOR") return VK_BLEND_FACTOR_SRC_COLOR;
				if (input == "VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR") return VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR;
				if (input == "VK_BLEND_FACTOR_DST_COLOR") return VK_BLEND_FACTOR_DST_COLOR;
				if (input == "VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR") return VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR;
				if (input == "VK_BLEND_FACTOR_SRC_ALPHA") return VK_BLEND_FACTOR_SRC_ALPHA;
				if (input == "VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA") return VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;
				if (input == "VK_BLEND_FACTOR_DST_ALPHA") return VK_BLEND_FACTOR_DST_ALPHA;
				if (input == "VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA") return VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA;
				if (input == "VK_BLEND_FACTOR_CONSTANT_COLOR") return VK_BLEND_FACTOR_CONSTANT_COLOR;
				if (input == "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR") return VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR;
				if (input == "VK_BLEND_FACTOR_CONSTANT_ALPHA") return VK_BLEND_FACTOR_CONSTANT_ALPHA;
				if (input == "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA") return VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA;
				if (input == "VK_BLEND_FACTOR_SRC_ALPHA_SATURATE") return VK_BLEND_FACTOR_SRC_ALPHA_SATURATE;
				if (input == "VK_BLEND_FACTOR_SRC1_COLOR") return VK_BLEND_FACTOR_SRC1_COLOR;
				if (input == "VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR") return VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR;
				if (input == "VK_BLEND_FACTOR_SRC1_ALPHA") return VK_BLEND_FACTOR_SRC1_ALPHA;
				if (input == "VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA") return VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA;
				if (input == "VK_BLEND_FACTOR_MAX_ENUM") return VK_BLEND_FACTOR_MAX_ENUM;
			}
		};
	};


	const char* VkColorComponentFlagBitsEnumList[5]{
"VK_COLOR_COMPONENT_R_BIT",
"VK_COLOR_COMPONENT_G_BIT",
"VK_COLOR_COMPONENT_B_BIT",
"VK_COLOR_COMPONENT_A_BIT",
"VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM",
	};

	struct VkColorComponentFlagBitsConverter
	{
		static const char* SelectionToString(VkColorComponentFlagBits input)
		{
			switch (input)
			{
			case VK_COLOR_COMPONENT_R_BIT: return "VK_COLOR_COMPONENT_R_BIT"; break;
			case VK_COLOR_COMPONENT_G_BIT: return "VK_COLOR_COMPONENT_G_BIT"; break;
			case VK_COLOR_COMPONENT_B_BIT: return "VK_COLOR_COMPONENT_B_BIT"; break;
			case VK_COLOR_COMPONENT_A_BIT: return "VK_COLOR_COMPONENT_A_BIT"; break;
			case VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM: return "VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM"; break;
			}
		}

		static VkColorComponentFlagBits SelectionToEnum(std::string input)
		{
			{
				if (input == "VK_COLOR_COMPONENT_R_BIT") return VK_COLOR_COMPONENT_R_BIT;
				if (input == "VK_COLOR_COMPONENT_G_BIT") return VK_COLOR_COMPONENT_G_BIT;
				if (input == "VK_COLOR_COMPONENT_B_BIT") return VK_COLOR_COMPONENT_B_BIT;
				if (input == "VK_COLOR_COMPONENT_A_BIT") return VK_COLOR_COMPONENT_A_BIT;
				if (input == "VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM") return VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM;
			}
		};
	};


	const char* VkDependencyFlagsEnumList[7]{
"VK_DEPENDENCY_BY_REGION_BIT",
"VK_DEPENDENCY_DEVICE_GROUP_BIT",
"VK_DEPENDENCY_VIEW_LOCAL_BIT",
"VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT",
"VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR",
"VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR",
"VK_DEPENDENCY_FLAG_BITS_MAX_ENUM",
	};

	struct VkDependencyFlagsConverter
	{
		static const char* SelectionToString(VkDependencyFlags input)
		{
			switch (input)
			{
			case VK_DEPENDENCY_BY_REGION_BIT: return "VK_DEPENDENCY_BY_REGION_BIT"; break;
			case VK_DEPENDENCY_DEVICE_GROUP_BIT: return "VK_DEPENDENCY_DEVICE_GROUP_BIT"; break;
			case VK_DEPENDENCY_VIEW_LOCAL_BIT: return "VK_DEPENDENCY_VIEW_LOCAL_BIT"; break;
			//case VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT: return "VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT"; break;
			case VK_DEPENDENCY_FLAG_BITS_MAX_ENUM: return "VK_DEPENDENCY_FLAG_BITS_MAX_ENUM"; break;
			}
		}

		static VkDependencyFlags SelectionToEnum(std::string input)
		{
			{
				if (input == "VK_DEPENDENCY_BY_REGION_BIT") return VK_DEPENDENCY_BY_REGION_BIT;
				if (input == "VK_DEPENDENCY_DEVICE_GROUP_BIT") return VK_DEPENDENCY_DEVICE_GROUP_BIT;
				if (input == "VK_DEPENDENCY_VIEW_LOCAL_BIT") return VK_DEPENDENCY_VIEW_LOCAL_BIT;
				//if (input == "VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT") return VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT;
				if (input == "VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR") return VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR;
				if (input == "VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR") return VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR;
				if (input == "VK_DEPENDENCY_FLAG_BITS_MAX_ENUM") return VK_DEPENDENCY_FLAG_BITS_MAX_ENUM;
			}
		};
	};


	const char* VkAccessFlagsEnumList[34]{
"VK_ACCESS_INDIRECT_COMMAND_READ_BIT",
"VK_ACCESS_INDEX_READ_BIT",
"VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT",
"VK_ACCESS_UNIFORM_READ_BIT",
"VK_ACCESS_INPUT_ATTACHMENT_READ_BIT",
"VK_ACCESS_SHADER_READ_BIT",
"VK_ACCESS_SHADER_WRITE_BIT",
"VK_ACCESS_COLOR_ATTACHMENT_READ_BIT",
"VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT",
"VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT",
"VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT",
"VK_ACCESS_TRANSFER_READ_BIT",
"VK_ACCESS_TRANSFER_WRITE_BIT",
"VK_ACCESS_HOST_READ_BIT",
"VK_ACCESS_HOST_WRITE_BIT",
"VK_ACCESS_MEMORY_READ_BIT",
"VK_ACCESS_MEMORY_WRITE_BIT",
"VK_ACCESS_NONE",
"VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT",
"VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT",
"VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT",
"VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT",
"VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT",
"VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR",
"VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR",
"VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT",
"VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR",
"VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV",
"VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV",
"VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV",
"VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV",
"VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV",
"VK_ACCESS_NONE_KHR",
"VK_ACCESS_FLAG_BITS_MAX_ENUM",
	};

	struct VkAccessFlagsConverter
	{
		static const char* SelectionToString(VkAccessFlags input)
		{
			switch (input)
			{
			case VK_ACCESS_INDIRECT_COMMAND_READ_BIT: return "VK_ACCESS_INDIRECT_COMMAND_READ_BIT"; break;
			case VK_ACCESS_INDEX_READ_BIT: return "VK_ACCESS_INDEX_READ_BIT"; break;
			case VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT: return "VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT"; break;
			case VK_ACCESS_UNIFORM_READ_BIT: return "VK_ACCESS_UNIFORM_READ_BIT"; break;
			case VK_ACCESS_INPUT_ATTACHMENT_READ_BIT: return "VK_ACCESS_INPUT_ATTACHMENT_READ_BIT"; break;
			case VK_ACCESS_SHADER_READ_BIT: return "VK_ACCESS_SHADER_READ_BIT"; break;
			case VK_ACCESS_SHADER_WRITE_BIT: return "VK_ACCESS_SHADER_WRITE_BIT"; break;
			case VK_ACCESS_COLOR_ATTACHMENT_READ_BIT: return "VK_ACCESS_COLOR_ATTACHMENT_READ_BIT"; break;
			case VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT: return "VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT"; break;
			case VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT: return "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT"; break;
			case VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT: return "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT"; break;
			case VK_ACCESS_TRANSFER_READ_BIT: return "VK_ACCESS_TRANSFER_READ_BIT"; break;
			case VK_ACCESS_TRANSFER_WRITE_BIT: return "VK_ACCESS_TRANSFER_WRITE_BIT"; break;
			case VK_ACCESS_HOST_READ_BIT: return "VK_ACCESS_HOST_READ_BIT"; break;
			case VK_ACCESS_HOST_WRITE_BIT: return "VK_ACCESS_HOST_WRITE_BIT"; break;
			case VK_ACCESS_MEMORY_READ_BIT: return "VK_ACCESS_MEMORY_READ_BIT"; break;
			case VK_ACCESS_MEMORY_WRITE_BIT: return "VK_ACCESS_MEMORY_WRITE_BIT"; break;
			case VK_ACCESS_NONE: return "VK_ACCESS_NONE"; break;
			case VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT: return "VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT"; break;
			case VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT: return "VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT"; break;
			case VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT: return "VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT"; break;
			case VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT: return "VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT"; break;
			case VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT: return "VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT"; break;
			case VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR: return "VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR"; break;
			case VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR: return "VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR"; break;
			case VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT: return "VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT"; break;
			case VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR: return "VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR"; break;
			case VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV: return "VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV"; break;
			case VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV: return "VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV"; break;
			case VK_ACCESS_FLAG_BITS_MAX_ENUM: return "VK_ACCESS_FLAG_BITS_MAX_ENUM"; break;
			}
		}

		static VkAccessFlags SelectionToEnum(std::string input)
		{
			{
				if (input == "VK_ACCESS_INDIRECT_COMMAND_READ_BIT") return VK_ACCESS_INDIRECT_COMMAND_READ_BIT;
				if (input == "VK_ACCESS_INDEX_READ_BIT") return VK_ACCESS_INDEX_READ_BIT;
				if (input == "VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT") return VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT;
				if (input == "VK_ACCESS_UNIFORM_READ_BIT") return VK_ACCESS_UNIFORM_READ_BIT;
				if (input == "VK_ACCESS_INPUT_ATTACHMENT_READ_BIT") return VK_ACCESS_INPUT_ATTACHMENT_READ_BIT;
				if (input == "VK_ACCESS_SHADER_READ_BIT") return VK_ACCESS_SHADER_READ_BIT;
				if (input == "VK_ACCESS_SHADER_WRITE_BIT") return VK_ACCESS_SHADER_WRITE_BIT;
				if (input == "VK_ACCESS_COLOR_ATTACHMENT_READ_BIT") return VK_ACCESS_COLOR_ATTACHMENT_READ_BIT;
				if (input == "VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT") return VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT;
				if (input == "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT") return VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT;
				if (input == "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT") return VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT;
				if (input == "VK_ACCESS_TRANSFER_READ_BIT") return VK_ACCESS_TRANSFER_READ_BIT;
				if (input == "VK_ACCESS_TRANSFER_WRITE_BIT") return VK_ACCESS_TRANSFER_WRITE_BIT;
				if (input == "VK_ACCESS_HOST_READ_BIT") return VK_ACCESS_HOST_READ_BIT;
				if (input == "VK_ACCESS_HOST_WRITE_BIT") return VK_ACCESS_HOST_WRITE_BIT;
				if (input == "VK_ACCESS_MEMORY_READ_BIT") return VK_ACCESS_MEMORY_READ_BIT;
				if (input == "VK_ACCESS_MEMORY_WRITE_BIT") return VK_ACCESS_MEMORY_WRITE_BIT;
				if (input == "VK_ACCESS_NONE") return VK_ACCESS_NONE;
				if (input == "VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT") return VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT;
				if (input == "VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT") return VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT;
				if (input == "VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT") return VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT;
				if (input == "VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT") return VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT;
				if (input == "VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT") return VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT;
				if (input == "VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR") return VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR;
				if (input == "VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR") return VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR;
				if (input == "VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT") return VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT;
				if (input == "VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR") return VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR;
				if (input == "VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV") return VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV;
				if (input == "VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV") return VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV;
				if (input == "VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV") return VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV;
				if (input == "VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV") return VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV;
				if (input == "VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV") return VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV;
				if (input == "VK_ACCESS_NONE_KHR") return VK_ACCESS_NONE_KHR;
				if (input == "VK_ACCESS_FLAG_BITS_MAX_ENUM") return VK_ACCESS_FLAG_BITS_MAX_ENUM;
			}
		};
	};


	const char* VkPipelineStageFlagBitsEnumList[34]{
"VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT",
"VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT",
"VK_PIPELINE_STAGE_VERTEX_INPUT_BIT",
"VK_PIPELINE_STAGE_VERTEX_SHADER_BIT",
"VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT",
"VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT",
"VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT",
"VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT",
"VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT",
"VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT",
"VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT",
"VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT",
"VK_PIPELINE_STAGE_TRANSFER_BIT",
"VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT",
"VK_PIPELINE_STAGE_HOST_BIT",
"VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT",
"VK_PIPELINE_STAGE_ALL_COMMANDS_BIT",
"VK_PIPELINE_STAGE_NONE",
"VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT",
"VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT",
"VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR",
"VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR",
"VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT",
"VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR",
"VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV",
"VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT",
"VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT",
"VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV",
"VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV",
"VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV",
"VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV",
"VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV",
"VK_PIPELINE_STAGE_NONE_KHR",
"VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM"
	};

	struct VkPipelineStageFlagBitsConverter
	{
		static const char* SelectionToString(VkPipelineStageFlagBits input)
		{
			switch (input)
			{
			case VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT: return "VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT"; break;
			case VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT: return "VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT"; break;
			case VK_PIPELINE_STAGE_VERTEX_INPUT_BIT: return "VK_PIPELINE_STAGE_VERTEX_INPUT_BIT"; break;
			case VK_PIPELINE_STAGE_VERTEX_SHADER_BIT: return "VK_PIPELINE_STAGE_VERTEX_SHADER_BIT"; break;
			case VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT: return "VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT"; break;
			case VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT: return "VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT"; break;
			case VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT: return "VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT"; break;
			case VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT: return "VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT"; break;
			case VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT: return "VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT"; break;
			case VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT: return "VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT"; break;
			case VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT: return "VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT"; break;
			case VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT: return "VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT"; break;
			case VK_PIPELINE_STAGE_TRANSFER_BIT: return "VK_PIPELINE_STAGE_TRANSFER_BIT"; break;
			case VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT: return "VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT"; break;
			case VK_PIPELINE_STAGE_HOST_BIT: return "VK_PIPELINE_STAGE_HOST_BIT"; break;
			case VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT: return "VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT"; break;
			case VK_PIPELINE_STAGE_ALL_COMMANDS_BIT: return "VK_PIPELINE_STAGE_ALL_COMMANDS_BIT"; break;
			case VK_PIPELINE_STAGE_NONE: return "VK_PIPELINE_STAGE_NONE"; break;
			case VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT: return "VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT"; break;
			case VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT: return "VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT"; break;
			case VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR: return "VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR"; break;
			case VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR: return "VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR"; break;
			case VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT: return "VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT"; break;
			case VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: return "VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR"; break;
			case VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV: return "VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV"; break;
			//case VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT: return "VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT"; break;
			//case VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT: return "VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT"; break;
			case VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM: return "VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM"; break;
			}
		}

		static VkPipelineStageFlagBits SelectionToEnum(std::string input)
		{
			{
				if (input == "VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT") return VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT;
				if (input == "VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT") return VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT;
				if (input == "VK_PIPELINE_STAGE_VERTEX_INPUT_BIT") return VK_PIPELINE_STAGE_VERTEX_INPUT_BIT;
				if (input == "VK_PIPELINE_STAGE_VERTEX_SHADER_BIT") return VK_PIPELINE_STAGE_VERTEX_SHADER_BIT;
				if (input == "VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT") return VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT;
				if (input == "VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT") return VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT;
				if (input == "VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT") return VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT;
				if (input == "VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT") return VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT;
				if (input == "VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT") return VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT;
				if (input == "VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT") return VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT;
				if (input == "VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT") return VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;
				if (input == "VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT") return VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT;
				if (input == "VK_PIPELINE_STAGE_TRANSFER_BIT") return VK_PIPELINE_STAGE_TRANSFER_BIT;
				if (input == "VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT") return VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT;
				if (input == "VK_PIPELINE_STAGE_HOST_BIT") return VK_PIPELINE_STAGE_HOST_BIT;
				if (input == "VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT") return VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT;
				if (input == "VK_PIPELINE_STAGE_ALL_COMMANDS_BIT") return VK_PIPELINE_STAGE_ALL_COMMANDS_BIT;
				if (input == "VK_PIPELINE_STAGE_NONE") return VK_PIPELINE_STAGE_NONE;
				if (input == "VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT") return VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT;
				if (input == "VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT") return VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT;
				if (input == "VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR") return VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR;
				if (input == "VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR") return VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR;
				if (input == "VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT") return VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT;
				if (input == "VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR") return VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR;
				if (input == "VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV") return VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV;
				//if (input == "VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT") return VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT;
				//if (input == "VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT") return VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT;
				if (input == "VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV") return VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV;
				if (input == "VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV") return VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV;
				if (input == "VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV") return VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV;
				if (input == "VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV") return VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV;
				if (input == "VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV") return VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV;
				if (input == "VK_PIPELINE_STAGE_NONE_KHR") return VK_PIPELINE_STAGE_NONE_KHR;
				if (input == "VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM") return VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM;
			}
		};
	};


	const char* VkImageLayoutEnumList[32]{
"VK_IMAGE_LAYOUT_UNDEFINED",
"VK_IMAGE_LAYOUT_GENERAL",
"VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL",
"VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL",
"VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL",
"VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL",
"VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL",
"VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL",
"VK_IMAGE_LAYOUT_PREINITIALIZED",
"VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL",
"VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL",
"VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL",
"VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL",
"VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL",
"VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL",
"VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL",
"VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL",
"VK_IMAGE_LAYOUT_PRESENT_SRC_KHR",
"VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR",
"VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT",
"VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR",
"VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT",
"VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR",
"VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR",
"VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV",
"VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR",
"VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR",
"VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR",
"VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR",
"VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR",
"VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR",
"VK_IMAGE_LAYOUT_MAX_ENUM",
	};

	struct VkImageLayoutConverter
	{
		static const char* SelectionToString(VkImageLayout input)
		{
			switch (input)
			{
			case VK_IMAGE_LAYOUT_UNDEFINED: return "VK_IMAGE_LAYOUT_UNDEFINED"; break;
			case VK_IMAGE_LAYOUT_GENERAL: return "VK_IMAGE_LAYOUT_GENERAL"; break;
			case VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL: return "VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL"; break;
			case VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL: return "VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL"; break;
			case VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL: return "VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL"; break;
			case VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL: return "VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL"; break;
			case VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL: return "VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL"; break;
			case VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL: return "VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL"; break;
			case VK_IMAGE_LAYOUT_PREINITIALIZED: return "VK_IMAGE_LAYOUT_PREINITIALIZED"; break;
			case VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL: return "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL"; break;
			case VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL: return "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL"; break;
			case VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL: return "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL"; break;
			case VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL: return "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL"; break;
			case VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL: return "VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL"; break;
			case VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL: return "VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL"; break;
			case VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL: return "VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL"; break;
			case VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL: return "VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL"; break;
			case VK_IMAGE_LAYOUT_PRESENT_SRC_KHR: return "VK_IMAGE_LAYOUT_PRESENT_SRC_KHR"; break;
			case VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR: return "VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR"; break;
			case VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT: return "VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT"; break;
			case VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR: return "VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR"; break;
			//case VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT: return "VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT"; break;
			case VK_IMAGE_LAYOUT_MAX_ENUM: return "VK_IMAGE_LAYOUT_MAX_ENUM"; break;
			}
		}

		static VkImageLayout SelectionToEnum(std::string input)
		{
			{
				if (input == "VK_IMAGE_LAYOUT_UNDEFINED") return VK_IMAGE_LAYOUT_UNDEFINED;
				if (input == "VK_IMAGE_LAYOUT_GENERAL") return VK_IMAGE_LAYOUT_GENERAL;
				if (input == "VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL") return VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;
				if (input == "VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL") return VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;
				if (input == "VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL") return VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL;
				if (input == "VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL") return VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
				if (input == "VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL") return VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL;
				if (input == "VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL") return VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL;
				if (input == "VK_IMAGE_LAYOUT_PREINITIALIZED") return VK_IMAGE_LAYOUT_PREINITIALIZED;
				if (input == "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL") return VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL;
				if (input == "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL") return VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL;
				if (input == "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL") return VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL;
				if (input == "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL") return VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL;
				if (input == "VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL") return VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL;
				if (input == "VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL") return VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL;
				if (input == "VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL") return VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL;
				if (input == "VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL") return VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL;
				if (input == "VK_IMAGE_LAYOUT_PRESENT_SRC_KHR") return VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;
				if (input == "VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR") return VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR;
				if (input == "VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT") return VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT;
				if (input == "VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR") return VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR;
				//if (input == "VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT") return VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT;
				if (input == "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR") return VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR;
				if (input == "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR") return VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR;
				if (input == "VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV") return VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV;
				if (input == "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR") return VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR;
				if (input == "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR") return VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR;
				if (input == "VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR") return VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR;
				if (input == "VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR") return VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR;
				if (input == "VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR") return VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR;
				if (input == "VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR") return VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR;
				if (input == "VK_IMAGE_LAYOUT_MAX_ENUM") return VK_IMAGE_LAYOUT_MAX_ENUM;
			}
		};
	};


	const char* VkAttachmentStoreOpEnumList[7]{
"VK_ATTACHMENT_STORE_OP_STORE",
"VK_ATTACHMENT_STORE_OP_DONT_CARE",
"VK_ATTACHMENT_STORE_OP_NONE",
"VK_ATTACHMENT_STORE_OP_NONE_KHR",
"VK_ATTACHMENT_STORE_OP_NONE_QCOM",
"VK_ATTACHMENT_STORE_OP_NONE_EXT",
"VK_ATTACHMENT_STORE_OP_MAX_ENUM",
	};

	struct VkAttachmentStoreOpConverter
	{
		static const char* SelectionToString(VkAttachmentStoreOp input)
		{
			switch (input)
			{
			case VK_ATTACHMENT_STORE_OP_STORE: return "VK_ATTACHMENT_STORE_OP_STORE"; break;
			case VK_ATTACHMENT_STORE_OP_DONT_CARE: return "VK_ATTACHMENT_STORE_OP_DONT_CARE"; break;
			case VK_ATTACHMENT_STORE_OP_NONE: return "VK_ATTACHMENT_STORE_OP_NONE"; break;
			case VK_ATTACHMENT_STORE_OP_MAX_ENUM: return "VK_ATTACHMENT_STORE_OP_MAX_ENUM"; break;
			}
		}

		static VkAttachmentStoreOp SelectionToEnum(std::string input)
		{
			{
				if (input == "VK_ATTACHMENT_STORE_OP_STORE") return VK_ATTACHMENT_STORE_OP_STORE;
				if (input == "VK_ATTACHMENT_STORE_OP_DONT_CARE") return VK_ATTACHMENT_STORE_OP_DONT_CARE;
				if (input == "VK_ATTACHMENT_STORE_OP_NONE") return VK_ATTACHMENT_STORE_OP_NONE;
				if (input == "VK_ATTACHMENT_STORE_OP_NONE_KHR") return VK_ATTACHMENT_STORE_OP_NONE_KHR;
				if (input == "VK_ATTACHMENT_STORE_OP_NONE_QCOM") return VK_ATTACHMENT_STORE_OP_NONE_QCOM;
				if (input == "VK_ATTACHMENT_STORE_OP_NONE_EXT") return VK_ATTACHMENT_STORE_OP_NONE_EXT;
				if (input == "VK_ATTACHMENT_STORE_OP_MAX_ENUM") return VK_ATTACHMENT_STORE_OP_MAX_ENUM;
			}
		};
	};


	const char* VkAttachmentLoadOpEnumList[5]{
"VK_ATTACHMENT_LOAD_OP_LOAD",
"VK_ATTACHMENT_LOAD_OP_CLEAR",
"VK_ATTACHMENT_LOAD_OP_DONT_CARE",
"VK_ATTACHMENT_LOAD_OP_NONE_EXT",
"VK_ATTACHMENT_LOAD_OP_MAX_ENUM",
	};

	struct VkAttachmentLoadOpConverter
	{
		static const char* SelectionToString(VkAttachmentLoadOp input)
		{
			switch (input)
			{
			case VK_ATTACHMENT_LOAD_OP_LOAD: return "VK_ATTACHMENT_LOAD_OP_LOAD"; break;
			case VK_ATTACHMENT_LOAD_OP_CLEAR: return "VK_ATTACHMENT_LOAD_OP_CLEAR"; break;
			case VK_ATTACHMENT_LOAD_OP_DONT_CARE: return "VK_ATTACHMENT_LOAD_OP_DONT_CARE"; break;
			case VK_ATTACHMENT_LOAD_OP_NONE_EXT: return "VK_ATTACHMENT_LOAD_OP_NONE_EXT"; break;
			case VK_ATTACHMENT_LOAD_OP_MAX_ENUM: return "VK_ATTACHMENT_LOAD_OP_MAX_ENUM"; break;
			}
		}

		static VkAttachmentLoadOp SelectionToEnum(std::string input)
		{
			{
				if (input == "VK_ATTACHMENT_LOAD_OP_LOAD") return VK_ATTACHMENT_LOAD_OP_LOAD;
				if (input == "VK_ATTACHMENT_LOAD_OP_CLEAR") return VK_ATTACHMENT_LOAD_OP_CLEAR;
				if (input == "VK_ATTACHMENT_LOAD_OP_DONT_CARE") return VK_ATTACHMENT_LOAD_OP_DONT_CARE;
				if (input == "VK_ATTACHMENT_LOAD_OP_NONE_EXT") return VK_ATTACHMENT_LOAD_OP_NONE_EXT;
				if (input == "VK_ATTACHMENT_LOAD_OP_MAX_ENUM") return VK_ATTACHMENT_LOAD_OP_MAX_ENUM;
			}
		};
	};


	const char* VkSampleCountFlagBitsEnumList[8]{
"VK_SAMPLE_COUNT_1_BIT",
"VK_SAMPLE_COUNT_2_BIT",
"VK_SAMPLE_COUNT_4_BIT",
"VK_SAMPLE_COUNT_8_BIT",
"VK_SAMPLE_COUNT_16_BIT",
"VK_SAMPLE_COUNT_32_BIT",
"VK_SAMPLE_COUNT_64_BIT",
"VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM",
	};

	struct VkSampleCountFlagBitsConverter
	{
		static const char* SelectionToString(VkSampleCountFlagBits input)
		{
			switch (input)
			{
			case VK_SAMPLE_COUNT_1_BIT: return "VK_SAMPLE_COUNT_1_BIT"; break;
			case VK_SAMPLE_COUNT_2_BIT: return "VK_SAMPLE_COUNT_2_BIT"; break;
			case VK_SAMPLE_COUNT_4_BIT: return "VK_SAMPLE_COUNT_4_BIT"; break;
			case VK_SAMPLE_COUNT_8_BIT: return "VK_SAMPLE_COUNT_8_BIT"; break;
			case VK_SAMPLE_COUNT_16_BIT: return "VK_SAMPLE_COUNT_16_BIT"; break;
			case VK_SAMPLE_COUNT_32_BIT: return "VK_SAMPLE_COUNT_32_BIT"; break;
			case VK_SAMPLE_COUNT_64_BIT: return "VK_SAMPLE_COUNT_64_BIT"; break;
			case VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM: return "VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM"; break;
			}
		}

		static VkSampleCountFlagBits SelectionToEnum(std::string input)
		{
			{
				if (input == "VK_SAMPLE_COUNT_1_BIT") return VK_SAMPLE_COUNT_1_BIT;
				if (input == "VK_SAMPLE_COUNT_2_BIT") return VK_SAMPLE_COUNT_2_BIT;
				if (input == "VK_SAMPLE_COUNT_4_BIT") return VK_SAMPLE_COUNT_4_BIT;
				if (input == "VK_SAMPLE_COUNT_8_BIT") return VK_SAMPLE_COUNT_8_BIT;
				if (input == "VK_SAMPLE_COUNT_16_BIT") return VK_SAMPLE_COUNT_16_BIT;
				if (input == "VK_SAMPLE_COUNT_32_BIT") return VK_SAMPLE_COUNT_32_BIT;
				if (input == "VK_SAMPLE_COUNT_64_BIT") return VK_SAMPLE_COUNT_64_BIT;
				if (input == "VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM") return VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM;
			}
		};
	};


	const char* VkFormatEnumList[303]{
"VK_FORMAT_UNDEFINED",
"VK_FORMAT_R4G4_UNORM_PACK8",
"VK_FORMAT_R4G4B4A4_UNORM_PACK16",
"VK_FORMAT_B4G4R4A4_UNORM_PACK16",
"VK_FORMAT_R5G6B5_UNORM_PACK16",
"VK_FORMAT_B5G6R5_UNORM_PACK16",
"VK_FORMAT_R5G5B5A1_UNORM_PACK16",
"VK_FORMAT_B5G5R5A1_UNORM_PACK16",
"VK_FORMAT_A1R5G5B5_UNORM_PACK16",
"VK_FORMAT_R8_UNORM",
"VK_FORMAT_R8_SNORM",
"VK_FORMAT_R8_USCALED",
"VK_FORMAT_R8_SSCALED",
"VK_FORMAT_R8_UINT",
"VK_FORMAT_R8_SINT",
"VK_FORMAT_R8_SRGB",
"VK_FORMAT_R8G8_UNORM",
"VK_FORMAT_R8G8_SNORM",
"VK_FORMAT_R8G8_USCALED",
"VK_FORMAT_R8G8_SSCALED",
"VK_FORMAT_R8G8_UINT",
"VK_FORMAT_R8G8_SINT",
"VK_FORMAT_R8G8_SRGB",
"VK_FORMAT_R8G8B8_UNORM",
"VK_FORMAT_R8G8B8_SNORM",
"VK_FORMAT_R8G8B8_USCALED",
"VK_FORMAT_R8G8B8_SSCALED",
"VK_FORMAT_R8G8B8_UINT",
"VK_FORMAT_R8G8B8_SINT",
"VK_FORMAT_R8G8B8_SRGB",
"VK_FORMAT_B8G8R8_UNORM",
"VK_FORMAT_B8G8R8_SNORM",
"VK_FORMAT_B8G8R8_USCALED",
"VK_FORMAT_B8G8R8_SSCALED",
"VK_FORMAT_B8G8R8_UINT",
"VK_FORMAT_B8G8R8_SINT",
"VK_FORMAT_B8G8R8_SRGB",
"VK_FORMAT_R8G8B8A8_UNORM",
"VK_FORMAT_R8G8B8A8_SNORM",
"VK_FORMAT_R8G8B8A8_USCALED",
"VK_FORMAT_R8G8B8A8_SSCALED",
"VK_FORMAT_R8G8B8A8_UINT",
"VK_FORMAT_R8G8B8A8_SINT",
"VK_FORMAT_R8G8B8A8_SRGB",
"VK_FORMAT_B8G8R8A8_UNORM",
"VK_FORMAT_B8G8R8A8_SNORM",
"VK_FORMAT_B8G8R8A8_USCALED",
"VK_FORMAT_B8G8R8A8_SSCALED",
"VK_FORMAT_B8G8R8A8_UINT",
"VK_FORMAT_B8G8R8A8_SINT",
"VK_FORMAT_B8G8R8A8_SRGB",
"VK_FORMAT_A8B8G8R8_UNORM_PACK32",
"VK_FORMAT_A8B8G8R8_SNORM_PACK32",
"VK_FORMAT_A8B8G8R8_USCALED_PACK32",
"VK_FORMAT_A8B8G8R8_SSCALED_PACK32",
"VK_FORMAT_A8B8G8R8_UINT_PACK32",
"VK_FORMAT_A8B8G8R8_SINT_PACK32",
"VK_FORMAT_A8B8G8R8_SRGB_PACK32",
"VK_FORMAT_A2R10G10B10_UNORM_PACK32",
"VK_FORMAT_A2R10G10B10_SNORM_PACK32",
"VK_FORMAT_A2R10G10B10_USCALED_PACK32",
"VK_FORMAT_A2R10G10B10_SSCALED_PACK32",
"VK_FORMAT_A2R10G10B10_UINT_PACK32",
"VK_FORMAT_A2R10G10B10_SINT_PACK32",
"VK_FORMAT_A2B10G10R10_UNORM_PACK32",
"VK_FORMAT_A2B10G10R10_SNORM_PACK32",
"VK_FORMAT_A2B10G10R10_USCALED_PACK32",
"VK_FORMAT_A2B10G10R10_SSCALED_PACK32",
"VK_FORMAT_A2B10G10R10_UINT_PACK32",
"VK_FORMAT_A2B10G10R10_SINT_PACK32",
"VK_FORMAT_R16_UNORM",
"VK_FORMAT_R16_SNORM",
"VK_FORMAT_R16_USCALED",
"VK_FORMAT_R16_SSCALED",
"VK_FORMAT_R16_UINT",
"VK_FORMAT_R16_SINT",
"VK_FORMAT_R16_SFLOAT",
"VK_FORMAT_R16G16_UNORM",
"VK_FORMAT_R16G16_SNORM",
"VK_FORMAT_R16G16_USCALED",
"VK_FORMAT_R16G16_SSCALED",
"VK_FORMAT_R16G16_UINT",
"VK_FORMAT_R16G16_SINT",
"VK_FORMAT_R16G16_SFLOAT",
"VK_FORMAT_R16G16B16_UNORM",
"VK_FORMAT_R16G16B16_SNORM",
"VK_FORMAT_R16G16B16_USCALED",
"VK_FORMAT_R16G16B16_SSCALED",
"VK_FORMAT_R16G16B16_UINT",
"VK_FORMAT_R16G16B16_SINT",
"VK_FORMAT_R16G16B16_SFLOAT",
"VK_FORMAT_R16G16B16A16_UNORM",
"VK_FORMAT_R16G16B16A16_SNORM",
"VK_FORMAT_R16G16B16A16_USCALED",
"VK_FORMAT_R16G16B16A16_SSCALED",
"VK_FORMAT_R16G16B16A16_UINT",
"VK_FORMAT_R16G16B16A16_SINT",
"VK_FORMAT_R16G16B16A16_SFLOAT",
"VK_FORMAT_R32_UINT",
"VK_FORMAT_R32_SINT",
"VK_FORMAT_R32_SFLOAT",
"VK_FORMAT_R32G32_UINT",
"VK_FORMAT_R32G32_SINT",
"VK_FORMAT_R32G32_SFLOAT",
"VK_FORMAT_R32G32B32_UINT",
"VK_FORMAT_R32G32B32_SINT",
"VK_FORMAT_R32G32B32_SFLOAT",
"VK_FORMAT_R32G32B32A32_UINT",
"VK_FORMAT_R32G32B32A32_SINT",
"VK_FORMAT_R32G32B32A32_SFLOAT",
"VK_FORMAT_R64_UINT",
"VK_FORMAT_R64_SINT",
"VK_FORMAT_R64_SFLOAT",
"VK_FORMAT_R64G64_UINT",
"VK_FORMAT_R64G64_SINT",
"VK_FORMAT_R64G64_SFLOAT",
"VK_FORMAT_R64G64B64_UINT",
"VK_FORMAT_R64G64B64_SINT",
"VK_FORMAT_R64G64B64_SFLOAT",
"VK_FORMAT_R64G64B64A64_UINT",
"VK_FORMAT_R64G64B64A64_SINT",
"VK_FORMAT_R64G64B64A64_SFLOAT",
"VK_FORMAT_B10G11R11_UFLOAT_PACK32",
"VK_FORMAT_E5B9G9R9_UFLOAT_PACK32",
"VK_FORMAT_D16_UNORM",
"VK_FORMAT_X8_D24_UNORM_PACK32",
"VK_FORMAT_D32_SFLOAT",
"VK_FORMAT_S8_UINT",
"VK_FORMAT_D16_UNORM_S8_UINT",
"VK_FORMAT_D24_UNORM_S8_UINT",
"VK_FORMAT_D32_SFLOAT_S8_UINT",
"VK_FORMAT_BC1_RGB_UNORM_BLOCK",
"VK_FORMAT_BC1_RGB_SRGB_BLOCK",
"VK_FORMAT_BC1_RGBA_UNORM_BLOCK",
"VK_FORMAT_BC1_RGBA_SRGB_BLOCK",
"VK_FORMAT_BC2_UNORM_BLOCK",
"VK_FORMAT_BC2_SRGB_BLOCK",
"VK_FORMAT_BC3_UNORM_BLOCK",
"VK_FORMAT_BC3_SRGB_BLOCK",
"VK_FORMAT_BC4_UNORM_BLOCK",
"VK_FORMAT_BC4_SNORM_BLOCK",
"VK_FORMAT_BC5_UNORM_BLOCK",
"VK_FORMAT_BC5_SNORM_BLOCK",
"VK_FORMAT_BC6H_UFLOAT_BLOCK",
"VK_FORMAT_BC6H_SFLOAT_BLOCK",
"VK_FORMAT_BC7_UNORM_BLOCK",
"VK_FORMAT_BC7_SRGB_BLOCK",
"VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK",
"VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK",
"VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK",
"VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK",
"VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK",
"VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK",
"VK_FORMAT_EAC_R11_UNORM_BLOCK",
"VK_FORMAT_EAC_R11_SNORM_BLOCK",
"VK_FORMAT_EAC_R11G11_UNORM_BLOCK",
"VK_FORMAT_EAC_R11G11_SNORM_BLOCK",
"VK_FORMAT_ASTC_4x4_UNORM_BLOCK",
"VK_FORMAT_ASTC_4x4_SRGB_BLOCK",
"VK_FORMAT_ASTC_5x4_UNORM_BLOCK",
"VK_FORMAT_ASTC_5x4_SRGB_BLOCK",
"VK_FORMAT_ASTC_5x5_UNORM_BLOCK",
"VK_FORMAT_ASTC_5x5_SRGB_BLOCK",
"VK_FORMAT_ASTC_6x5_UNORM_BLOCK",
"VK_FORMAT_ASTC_6x5_SRGB_BLOCK",
"VK_FORMAT_ASTC_6x6_UNORM_BLOCK",
"VK_FORMAT_ASTC_6x6_SRGB_BLOCK",
"VK_FORMAT_ASTC_8x5_UNORM_BLOCK",
"VK_FORMAT_ASTC_8x5_SRGB_BLOCK",
"VK_FORMAT_ASTC_8x6_UNORM_BLOCK",
"VK_FORMAT_ASTC_8x6_SRGB_BLOCK",
"VK_FORMAT_ASTC_8x8_UNORM_BLOCK",
"VK_FORMAT_ASTC_8x8_SRGB_BLOCK",
"VK_FORMAT_ASTC_10x5_UNORM_BLOCK",
"VK_FORMAT_ASTC_10x5_SRGB_BLOCK",
"VK_FORMAT_ASTC_10x6_UNORM_BLOCK",
"VK_FORMAT_ASTC_10x6_SRGB_BLOCK",
"VK_FORMAT_ASTC_10x8_UNORM_BLOCK",
"VK_FORMAT_ASTC_10x8_SRGB_BLOCK",
"VK_FORMAT_ASTC_10x10_UNORM_BLOCK",
"VK_FORMAT_ASTC_10x10_SRGB_BLOCK",
"VK_FORMAT_ASTC_12x10_UNORM_BLOCK",
"VK_FORMAT_ASTC_12x10_SRGB_BLOCK",
"VK_FORMAT_ASTC_12x12_UNORM_BLOCK",
"VK_FORMAT_ASTC_12x12_SRGB_BLOCK",
"VK_FORMAT_G8B8G8R8_422_UNORM",
"VK_FORMAT_B8G8R8G8_422_UNORM",
"VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM",
"VK_FORMAT_G8_B8R8_2PLANE_420_UNORM",
"VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM",
"VK_FORMAT_G8_B8R8_2PLANE_422_UNORM",
"VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM",
"VK_FORMAT_R10X6_UNORM_PACK16",
"VK_FORMAT_R10X6G10X6_UNORM_2PACK16",
"VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16",
"VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16",
"VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16",
"VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16",
"VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16",
"VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16",
"VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16",
"VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16",
"VK_FORMAT_R12X4_UNORM_PACK16",
"VK_FORMAT_R12X4G12X4_UNORM_2PACK16",
"VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16",
"VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16",
"VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16",
"VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16",
"VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16",
"VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16",
"VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16",
"VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16",
"VK_FORMAT_G16B16G16R16_422_UNORM",
"VK_FORMAT_B16G16R16G16_422_UNORM",
"VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM",
"VK_FORMAT_G16_B16R16_2PLANE_420_UNORM",
"VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM",
"VK_FORMAT_G16_B16R16_2PLANE_422_UNORM",
"VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM",
"VK_FORMAT_G8_B8R8_2PLANE_444_UNORM",
"VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16",
"VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16",
"VK_FORMAT_G16_B16R16_2PLANE_444_UNORM",
"VK_FORMAT_A4R4G4B4_UNORM_PACK16",
"VK_FORMAT_A4B4G4R4_UNORM_PACK16",
"VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK",
"VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK",
"VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK",
"VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK",
"VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK",
"VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK",
"VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK",
"VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK",
"VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK",
"VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK",
"VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK",
"VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK",
"VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK",
"VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK",
"VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG",
"VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG",
"VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG",
"VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG",
"VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG",
"VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG",
"VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG",
"VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG",
"VK_FORMAT_R16G16_S10_5_NV",
"VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT",
"VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT",
"VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT",
"VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT",
"VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT",
"VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT",
"VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT",
"VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT",
"VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT",
"VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT",
"VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT",
"VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT",
"VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT",
"VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT",
"VK_FORMAT_G8B8G8R8_422_UNORM_KHR",
"VK_FORMAT_B8G8R8G8_422_UNORM_KHR",
"VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR",
"VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR",
"VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR",
"VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR",
"VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR",
"VK_FORMAT_R10X6_UNORM_PACK16_KHR",
"VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR",
"VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR",
"VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR",
"VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR",
"VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR",
"VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR",
"VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR",
"VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR",
"VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR",
"VK_FORMAT_R12X4_UNORM_PACK16_KHR",
"VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR",
"VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR",
"VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR",
"VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR",
"VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR",
"VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR",
"VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR",
"VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR",
"VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR",
"VK_FORMAT_G16B16G16R16_422_UNORM_KHR",
"VK_FORMAT_B16G16R16G16_422_UNORM_KHR",
"VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR",
"VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR",
"VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR",
"VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR",
"VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR",
"VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT",
"VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT",
"VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT",
"VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT",
"VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT",
"VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT",
"VK_FORMAT_MAX_ENUM",
	};

	struct VkFormatConverter
	{
		static const char* SelectionToString(VkFormat input)
		{
			switch (input)
			{
			case VK_FORMAT_UNDEFINED: return "VK_FORMAT_UNDEFINED"; break;
			case VK_FORMAT_R4G4_UNORM_PACK8: return "VK_FORMAT_R4G4_UNORM_PACK8"; break;
			case VK_FORMAT_R4G4B4A4_UNORM_PACK16: return "VK_FORMAT_R4G4B4A4_UNORM_PACK16"; break;
			case VK_FORMAT_B4G4R4A4_UNORM_PACK16: return "VK_FORMAT_B4G4R4A4_UNORM_PACK16"; break;
			case VK_FORMAT_R5G6B5_UNORM_PACK16: return "VK_FORMAT_R5G6B5_UNORM_PACK16"; break;
			case VK_FORMAT_B5G6R5_UNORM_PACK16: return "VK_FORMAT_B5G6R5_UNORM_PACK16"; break;
			case VK_FORMAT_R5G5B5A1_UNORM_PACK16: return "VK_FORMAT_R5G5B5A1_UNORM_PACK16"; break;
			case VK_FORMAT_B5G5R5A1_UNORM_PACK16: return "VK_FORMAT_B5G5R5A1_UNORM_PACK16"; break;
			case VK_FORMAT_A1R5G5B5_UNORM_PACK16: return "VK_FORMAT_A1R5G5B5_UNORM_PACK16"; break;
			case VK_FORMAT_R8_UNORM: return "VK_FORMAT_R8_UNORM"; break;
			case VK_FORMAT_R8_SNORM: return "VK_FORMAT_R8_SNORM"; break;
			case VK_FORMAT_R8_USCALED: return "VK_FORMAT_R8_USCALED"; break;
			case VK_FORMAT_R8_SSCALED: return "VK_FORMAT_R8_SSCALED"; break;
			case VK_FORMAT_R8_UINT: return "VK_FORMAT_R8_UINT"; break;
			case VK_FORMAT_R8_SINT: return "VK_FORMAT_R8_SINT"; break;
			case VK_FORMAT_R8_SRGB: return "VK_FORMAT_R8_SRGB"; break;
			case VK_FORMAT_R8G8_UNORM: return "VK_FORMAT_R8G8_UNORM"; break;
			case VK_FORMAT_R8G8_SNORM: return "VK_FORMAT_R8G8_SNORM"; break;
			case VK_FORMAT_R8G8_USCALED: return "VK_FORMAT_R8G8_USCALED"; break;
			case VK_FORMAT_R8G8_SSCALED: return "VK_FORMAT_R8G8_SSCALED"; break;
			case VK_FORMAT_R8G8_UINT: return "VK_FORMAT_R8G8_UINT"; break;
			case VK_FORMAT_R8G8_SINT: return "VK_FORMAT_R8G8_SINT"; break;
			case VK_FORMAT_R8G8_SRGB: return "VK_FORMAT_R8G8_SRGB"; break;
			case VK_FORMAT_R8G8B8_UNORM: return "VK_FORMAT_R8G8B8_UNORM"; break;
			case VK_FORMAT_R8G8B8_SNORM: return "VK_FORMAT_R8G8B8_SNORM"; break;
			case VK_FORMAT_R8G8B8_USCALED: return "VK_FORMAT_R8G8B8_USCALED"; break;
			case VK_FORMAT_R8G8B8_SSCALED: return "VK_FORMAT_R8G8B8_SSCALED"; break;
			case VK_FORMAT_R8G8B8_UINT: return "VK_FORMAT_R8G8B8_UINT"; break;
			case VK_FORMAT_R8G8B8_SINT: return "VK_FORMAT_R8G8B8_SINT"; break;
			case VK_FORMAT_R8G8B8_SRGB: return "VK_FORMAT_R8G8B8_SRGB"; break;
			case VK_FORMAT_B8G8R8_UNORM: return "VK_FORMAT_B8G8R8_UNORM"; break;
			case VK_FORMAT_B8G8R8_SNORM: return "VK_FORMAT_B8G8R8_SNORM"; break;
			case VK_FORMAT_B8G8R8_USCALED: return "VK_FORMAT_B8G8R8_USCALED"; break;
			case VK_FORMAT_B8G8R8_SSCALED: return "VK_FORMAT_B8G8R8_SSCALED"; break;
			case VK_FORMAT_B8G8R8_UINT: return "VK_FORMAT_B8G8R8_UINT"; break;
			case VK_FORMAT_B8G8R8_SINT: return "VK_FORMAT_B8G8R8_SINT"; break;
			case VK_FORMAT_B8G8R8_SRGB: return "VK_FORMAT_B8G8R8_SRGB"; break;
			case VK_FORMAT_R8G8B8A8_UNORM: return "VK_FORMAT_R8G8B8A8_UNORM"; break;
			case VK_FORMAT_R8G8B8A8_SNORM: return "VK_FORMAT_R8G8B8A8_SNORM"; break;
			case VK_FORMAT_R8G8B8A8_USCALED: return "VK_FORMAT_R8G8B8A8_USCALED"; break;
			case VK_FORMAT_R8G8B8A8_SSCALED: return "VK_FORMAT_R8G8B8A8_SSCALED"; break;
			case VK_FORMAT_R8G8B8A8_UINT: return "VK_FORMAT_R8G8B8A8_UINT"; break;
			case VK_FORMAT_R8G8B8A8_SINT: return "VK_FORMAT_R8G8B8A8_SINT"; break;
			case VK_FORMAT_R8G8B8A8_SRGB: return "VK_FORMAT_R8G8B8A8_SRGB"; break;
			case VK_FORMAT_B8G8R8A8_UNORM: return "VK_FORMAT_B8G8R8A8_UNORM"; break;
			case VK_FORMAT_B8G8R8A8_SNORM: return "VK_FORMAT_B8G8R8A8_SNORM"; break;
			case VK_FORMAT_B8G8R8A8_USCALED: return "VK_FORMAT_B8G8R8A8_USCALED"; break;
			case VK_FORMAT_B8G8R8A8_SSCALED: return "VK_FORMAT_B8G8R8A8_SSCALED"; break;
			case VK_FORMAT_B8G8R8A8_UINT: return "VK_FORMAT_B8G8R8A8_UINT"; break;
			case VK_FORMAT_B8G8R8A8_SINT: return "VK_FORMAT_B8G8R8A8_SINT"; break;
			case VK_FORMAT_B8G8R8A8_SRGB: return "VK_FORMAT_B8G8R8A8_SRGB"; break;
			case VK_FORMAT_A8B8G8R8_UNORM_PACK32: return "VK_FORMAT_A8B8G8R8_UNORM_PACK32"; break;
			case VK_FORMAT_A8B8G8R8_SNORM_PACK32: return "VK_FORMAT_A8B8G8R8_SNORM_PACK32"; break;
			case VK_FORMAT_A8B8G8R8_USCALED_PACK32: return "VK_FORMAT_A8B8G8R8_USCALED_PACK32"; break;
			case VK_FORMAT_A8B8G8R8_SSCALED_PACK32: return "VK_FORMAT_A8B8G8R8_SSCALED_PACK32"; break;
			case VK_FORMAT_A8B8G8R8_UINT_PACK32: return "VK_FORMAT_A8B8G8R8_UINT_PACK32"; break;
			case VK_FORMAT_A8B8G8R8_SINT_PACK32: return "VK_FORMAT_A8B8G8R8_SINT_PACK32"; break;
			case VK_FORMAT_A8B8G8R8_SRGB_PACK32: return "VK_FORMAT_A8B8G8R8_SRGB_PACK32"; break;
			case VK_FORMAT_A2R10G10B10_UNORM_PACK32: return "VK_FORMAT_A2R10G10B10_UNORM_PACK32"; break;
			case VK_FORMAT_A2R10G10B10_SNORM_PACK32: return "VK_FORMAT_A2R10G10B10_SNORM_PACK32"; break;
			case VK_FORMAT_A2R10G10B10_USCALED_PACK32: return "VK_FORMAT_A2R10G10B10_USCALED_PACK32"; break;
			case VK_FORMAT_A2R10G10B10_SSCALED_PACK32: return "VK_FORMAT_A2R10G10B10_SSCALED_PACK32"; break;
			case VK_FORMAT_A2R10G10B10_UINT_PACK32: return "VK_FORMAT_A2R10G10B10_UINT_PACK32"; break;
			case VK_FORMAT_A2R10G10B10_SINT_PACK32: return "VK_FORMAT_A2R10G10B10_SINT_PACK32"; break;
			case VK_FORMAT_A2B10G10R10_UNORM_PACK32: return "VK_FORMAT_A2B10G10R10_UNORM_PACK32"; break;
			case VK_FORMAT_A2B10G10R10_SNORM_PACK32: return "VK_FORMAT_A2B10G10R10_SNORM_PACK32"; break;
			case VK_FORMAT_A2B10G10R10_USCALED_PACK32: return "VK_FORMAT_A2B10G10R10_USCALED_PACK32"; break;
			case VK_FORMAT_A2B10G10R10_SSCALED_PACK32: return "VK_FORMAT_A2B10G10R10_SSCALED_PACK32"; break;
			case VK_FORMAT_A2B10G10R10_UINT_PACK32: return "VK_FORMAT_A2B10G10R10_UINT_PACK32"; break;
			case VK_FORMAT_A2B10G10R10_SINT_PACK32: return "VK_FORMAT_A2B10G10R10_SINT_PACK32"; break;
			case VK_FORMAT_R16_UNORM: return "VK_FORMAT_R16_UNORM"; break;
			case VK_FORMAT_R16_SNORM: return "VK_FORMAT_R16_SNORM"; break;
			case VK_FORMAT_R16_USCALED: return "VK_FORMAT_R16_USCALED"; break;
			case VK_FORMAT_R16_SSCALED: return "VK_FORMAT_R16_SSCALED"; break;
			case VK_FORMAT_R16_UINT: return "VK_FORMAT_R16_UINT"; break;
			case VK_FORMAT_R16_SINT: return "VK_FORMAT_R16_SINT"; break;
			case VK_FORMAT_R16_SFLOAT: return "VK_FORMAT_R16_SFLOAT"; break;
			case VK_FORMAT_R16G16_UNORM: return "VK_FORMAT_R16G16_UNORM"; break;
			case VK_FORMAT_R16G16_SNORM: return "VK_FORMAT_R16G16_SNORM"; break;
			case VK_FORMAT_R16G16_USCALED: return "VK_FORMAT_R16G16_USCALED"; break;
			case VK_FORMAT_R16G16_SSCALED: return "VK_FORMAT_R16G16_SSCALED"; break;
			case VK_FORMAT_R16G16_UINT: return "VK_FORMAT_R16G16_UINT"; break;
			case VK_FORMAT_R16G16_SINT: return "VK_FORMAT_R16G16_SINT"; break;
			case VK_FORMAT_R16G16_SFLOAT: return "VK_FORMAT_R16G16_SFLOAT"; break;
			case VK_FORMAT_R16G16B16_UNORM: return "VK_FORMAT_R16G16B16_UNORM"; break;
			case VK_FORMAT_R16G16B16_SNORM: return "VK_FORMAT_R16G16B16_SNORM"; break;
			case VK_FORMAT_R16G16B16_USCALED: return "VK_FORMAT_R16G16B16_USCALED"; break;
			case VK_FORMAT_R16G16B16_SSCALED: return "VK_FORMAT_R16G16B16_SSCALED"; break;
			case VK_FORMAT_R16G16B16_UINT: return "VK_FORMAT_R16G16B16_UINT"; break;
			case VK_FORMAT_R16G16B16_SINT: return "VK_FORMAT_R16G16B16_SINT"; break;
			case VK_FORMAT_R16G16B16_SFLOAT: return "VK_FORMAT_R16G16B16_SFLOAT"; break;
			case VK_FORMAT_R16G16B16A16_UNORM: return "VK_FORMAT_R16G16B16A16_UNORM"; break;
			case VK_FORMAT_R16G16B16A16_SNORM: return "VK_FORMAT_R16G16B16A16_SNORM"; break;
			case VK_FORMAT_R16G16B16A16_USCALED: return "VK_FORMAT_R16G16B16A16_USCALED"; break;
			case VK_FORMAT_R16G16B16A16_SSCALED: return "VK_FORMAT_R16G16B16A16_SSCALED"; break;
			case VK_FORMAT_R16G16B16A16_UINT: return "VK_FORMAT_R16G16B16A16_UINT"; break;
			case VK_FORMAT_R16G16B16A16_SINT: return "VK_FORMAT_R16G16B16A16_SINT"; break;
			case VK_FORMAT_R16G16B16A16_SFLOAT: return "VK_FORMAT_R16G16B16A16_SFLOAT"; break;
			case VK_FORMAT_R32_UINT: return "VK_FORMAT_R32_UINT"; break;
			case VK_FORMAT_R32_SINT: return "VK_FORMAT_R32_SINT"; break;
			case VK_FORMAT_R32_SFLOAT: return "VK_FORMAT_R32_SFLOAT"; break;
			case VK_FORMAT_R32G32_UINT: return "VK_FORMAT_R32G32_UINT"; break;
			case VK_FORMAT_R32G32_SINT: return "VK_FORMAT_R32G32_SINT"; break;
			case VK_FORMAT_R32G32_SFLOAT: return "VK_FORMAT_R32G32_SFLOAT"; break;
			case VK_FORMAT_R32G32B32_UINT: return "VK_FORMAT_R32G32B32_UINT"; break;
			case VK_FORMAT_R32G32B32_SINT: return "VK_FORMAT_R32G32B32_SINT"; break;
			case VK_FORMAT_R32G32B32_SFLOAT: return "VK_FORMAT_R32G32B32_SFLOAT"; break;
			case VK_FORMAT_R32G32B32A32_UINT: return "VK_FORMAT_R32G32B32A32_UINT"; break;
			case VK_FORMAT_R32G32B32A32_SINT: return "VK_FORMAT_R32G32B32A32_SINT"; break;
			case VK_FORMAT_R32G32B32A32_SFLOAT: return "VK_FORMAT_R32G32B32A32_SFLOAT"; break;
			case VK_FORMAT_R64_UINT: return "VK_FORMAT_R64_UINT"; break;
			case VK_FORMAT_R64_SINT: return "VK_FORMAT_R64_SINT"; break;
			case VK_FORMAT_R64_SFLOAT: return "VK_FORMAT_R64_SFLOAT"; break;
			case VK_FORMAT_R64G64_UINT: return "VK_FORMAT_R64G64_UINT"; break;
			case VK_FORMAT_R64G64_SINT: return "VK_FORMAT_R64G64_SINT"; break;
			case VK_FORMAT_R64G64_SFLOAT: return "VK_FORMAT_R64G64_SFLOAT"; break;
			case VK_FORMAT_R64G64B64_UINT: return "VK_FORMAT_R64G64B64_UINT"; break;
			case VK_FORMAT_R64G64B64_SINT: return "VK_FORMAT_R64G64B64_SINT"; break;
			case VK_FORMAT_R64G64B64_SFLOAT: return "VK_FORMAT_R64G64B64_SFLOAT"; break;
			case VK_FORMAT_R64G64B64A64_UINT: return "VK_FORMAT_R64G64B64A64_UINT"; break;
			case VK_FORMAT_R64G64B64A64_SINT: return "VK_FORMAT_R64G64B64A64_SINT"; break;
			case VK_FORMAT_R64G64B64A64_SFLOAT: return "VK_FORMAT_R64G64B64A64_SFLOAT"; break;
			case VK_FORMAT_B10G11R11_UFLOAT_PACK32: return "VK_FORMAT_B10G11R11_UFLOAT_PACK32"; break;
			case VK_FORMAT_E5B9G9R9_UFLOAT_PACK32: return "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32"; break;
			case VK_FORMAT_D16_UNORM: return "VK_FORMAT_D16_UNORM"; break;
			case VK_FORMAT_X8_D24_UNORM_PACK32: return "VK_FORMAT_X8_D24_UNORM_PACK32"; break;
			case VK_FORMAT_D32_SFLOAT: return "VK_FORMAT_D32_SFLOAT"; break;
			case VK_FORMAT_S8_UINT: return "VK_FORMAT_S8_UINT"; break;
			case VK_FORMAT_D16_UNORM_S8_UINT: return "VK_FORMAT_D16_UNORM_S8_UINT"; break;
			case VK_FORMAT_D24_UNORM_S8_UINT: return "VK_FORMAT_D24_UNORM_S8_UINT"; break;
			case VK_FORMAT_D32_SFLOAT_S8_UINT: return "VK_FORMAT_D32_SFLOAT_S8_UINT"; break;
			case VK_FORMAT_BC1_RGB_UNORM_BLOCK: return "VK_FORMAT_BC1_RGB_UNORM_BLOCK"; break;
			case VK_FORMAT_BC1_RGB_SRGB_BLOCK: return "VK_FORMAT_BC1_RGB_SRGB_BLOCK"; break;
			case VK_FORMAT_BC1_RGBA_UNORM_BLOCK: return "VK_FORMAT_BC1_RGBA_UNORM_BLOCK"; break;
			case VK_FORMAT_BC1_RGBA_SRGB_BLOCK: return "VK_FORMAT_BC1_RGBA_SRGB_BLOCK"; break;
			case VK_FORMAT_BC2_UNORM_BLOCK: return "VK_FORMAT_BC2_UNORM_BLOCK"; break;
			case VK_FORMAT_BC2_SRGB_BLOCK: return "VK_FORMAT_BC2_SRGB_BLOCK"; break;
			case VK_FORMAT_BC3_UNORM_BLOCK: return "VK_FORMAT_BC3_UNORM_BLOCK"; break;
			case VK_FORMAT_BC3_SRGB_BLOCK: return "VK_FORMAT_BC3_SRGB_BLOCK"; break;
			case VK_FORMAT_BC4_UNORM_BLOCK: return "VK_FORMAT_BC4_UNORM_BLOCK"; break;
			case VK_FORMAT_BC4_SNORM_BLOCK: return "VK_FORMAT_BC4_SNORM_BLOCK"; break;
			case VK_FORMAT_BC5_UNORM_BLOCK: return "VK_FORMAT_BC5_UNORM_BLOCK"; break;
			case VK_FORMAT_BC5_SNORM_BLOCK: return "VK_FORMAT_BC5_SNORM_BLOCK"; break;
			case VK_FORMAT_BC6H_UFLOAT_BLOCK: return "VK_FORMAT_BC6H_UFLOAT_BLOCK"; break;
			case VK_FORMAT_BC6H_SFLOAT_BLOCK: return "VK_FORMAT_BC6H_SFLOAT_BLOCK"; break;
			case VK_FORMAT_BC7_UNORM_BLOCK: return "VK_FORMAT_BC7_UNORM_BLOCK"; break;
			case VK_FORMAT_BC7_SRGB_BLOCK: return "VK_FORMAT_BC7_SRGB_BLOCK"; break;
			case VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK: return "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK"; break;
			case VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK: return "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK"; break;
			case VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK: return "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK"; break;
			case VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK: return "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK"; break;
			case VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK: return "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK"; break;
			case VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK: return "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK"; break;
			case VK_FORMAT_EAC_R11_UNORM_BLOCK: return "VK_FORMAT_EAC_R11_UNORM_BLOCK"; break;
			case VK_FORMAT_EAC_R11_SNORM_BLOCK: return "VK_FORMAT_EAC_R11_SNORM_BLOCK"; break;
			case VK_FORMAT_EAC_R11G11_UNORM_BLOCK: return "VK_FORMAT_EAC_R11G11_UNORM_BLOCK"; break;
			case VK_FORMAT_EAC_R11G11_SNORM_BLOCK: return "VK_FORMAT_EAC_R11G11_SNORM_BLOCK"; break;
			case VK_FORMAT_ASTC_4x4_UNORM_BLOCK: return "VK_FORMAT_ASTC_4x4_UNORM_BLOCK"; break;
			case VK_FORMAT_ASTC_4x4_SRGB_BLOCK: return "VK_FORMAT_ASTC_4x4_SRGB_BLOCK"; break;
			case VK_FORMAT_ASTC_5x4_UNORM_BLOCK: return "VK_FORMAT_ASTC_5x4_UNORM_BLOCK"; break;
			case VK_FORMAT_ASTC_5x4_SRGB_BLOCK: return "VK_FORMAT_ASTC_5x4_SRGB_BLOCK"; break;
			case VK_FORMAT_ASTC_5x5_UNORM_BLOCK: return "VK_FORMAT_ASTC_5x5_UNORM_BLOCK"; break;
			case VK_FORMAT_ASTC_5x5_SRGB_BLOCK: return "VK_FORMAT_ASTC_5x5_SRGB_BLOCK"; break;
			case VK_FORMAT_ASTC_6x5_UNORM_BLOCK: return "VK_FORMAT_ASTC_6x5_UNORM_BLOCK"; break;
			case VK_FORMAT_ASTC_6x5_SRGB_BLOCK: return "VK_FORMAT_ASTC_6x5_SRGB_BLOCK"; break;
			case VK_FORMAT_ASTC_6x6_UNORM_BLOCK: return "VK_FORMAT_ASTC_6x6_UNORM_BLOCK"; break;
			case VK_FORMAT_ASTC_6x6_SRGB_BLOCK: return "VK_FORMAT_ASTC_6x6_SRGB_BLOCK"; break;
			case VK_FORMAT_ASTC_8x5_UNORM_BLOCK: return "VK_FORMAT_ASTC_8x5_UNORM_BLOCK"; break;
			case VK_FORMAT_ASTC_8x5_SRGB_BLOCK: return "VK_FORMAT_ASTC_8x5_SRGB_BLOCK"; break;
			case VK_FORMAT_ASTC_8x6_UNORM_BLOCK: return "VK_FORMAT_ASTC_8x6_UNORM_BLOCK"; break;
			case VK_FORMAT_ASTC_8x6_SRGB_BLOCK: return "VK_FORMAT_ASTC_8x6_SRGB_BLOCK"; break;
			case VK_FORMAT_ASTC_8x8_UNORM_BLOCK: return "VK_FORMAT_ASTC_8x8_UNORM_BLOCK"; break;
			case VK_FORMAT_ASTC_8x8_SRGB_BLOCK: return "VK_FORMAT_ASTC_8x8_SRGB_BLOCK"; break;
			case VK_FORMAT_ASTC_10x5_UNORM_BLOCK: return "VK_FORMAT_ASTC_10x5_UNORM_BLOCK"; break;
			case VK_FORMAT_ASTC_10x5_SRGB_BLOCK: return "VK_FORMAT_ASTC_10x5_SRGB_BLOCK"; break;
			case VK_FORMAT_ASTC_10x6_UNORM_BLOCK: return "VK_FORMAT_ASTC_10x6_UNORM_BLOCK"; break;
			case VK_FORMAT_ASTC_10x6_SRGB_BLOCK: return "VK_FORMAT_ASTC_10x6_SRGB_BLOCK"; break;
			case VK_FORMAT_ASTC_10x8_UNORM_BLOCK: return "VK_FORMAT_ASTC_10x8_UNORM_BLOCK"; break;
			case VK_FORMAT_ASTC_10x8_SRGB_BLOCK: return "VK_FORMAT_ASTC_10x8_SRGB_BLOCK"; break;
			case VK_FORMAT_ASTC_10x10_UNORM_BLOCK: return "VK_FORMAT_ASTC_10x10_UNORM_BLOCK"; break;
			case VK_FORMAT_ASTC_10x10_SRGB_BLOCK: return "VK_FORMAT_ASTC_10x10_SRGB_BLOCK"; break;
			case VK_FORMAT_ASTC_12x10_UNORM_BLOCK: return "VK_FORMAT_ASTC_12x10_UNORM_BLOCK"; break;
			case VK_FORMAT_ASTC_12x10_SRGB_BLOCK: return "VK_FORMAT_ASTC_12x10_SRGB_BLOCK"; break;
			case VK_FORMAT_ASTC_12x12_UNORM_BLOCK: return "VK_FORMAT_ASTC_12x12_UNORM_BLOCK"; break;
			case VK_FORMAT_ASTC_12x12_SRGB_BLOCK: return "VK_FORMAT_ASTC_12x12_SRGB_BLOCK"; break;
			case VK_FORMAT_G8B8G8R8_422_UNORM: return "VK_FORMAT_G8B8G8R8_422_UNORM"; break;
			case VK_FORMAT_B8G8R8G8_422_UNORM: return "VK_FORMAT_B8G8R8G8_422_UNORM"; break;
			case VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM: return "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM"; break;
			case VK_FORMAT_G8_B8R8_2PLANE_420_UNORM: return "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM"; break;
			case VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM: return "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM"; break;
			case VK_FORMAT_G8_B8R8_2PLANE_422_UNORM: return "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM"; break;
			case VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM: return "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM"; break;
			case VK_FORMAT_R10X6_UNORM_PACK16: return "VK_FORMAT_R10X6_UNORM_PACK16"; break;
			case VK_FORMAT_R10X6G10X6_UNORM_2PACK16: return "VK_FORMAT_R10X6G10X6_UNORM_2PACK16"; break;
			case VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16: return "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16"; break;
			case VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16: return "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16"; break;
			case VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16: return "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16"; break;
			case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16: return "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16"; break;
			case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16: return "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16"; break;
			case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16: return "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16"; break;
			case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16: return "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16"; break;
			case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16: return "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16"; break;
			case VK_FORMAT_R12X4_UNORM_PACK16: return "VK_FORMAT_R12X4_UNORM_PACK16"; break;
			case VK_FORMAT_R12X4G12X4_UNORM_2PACK16: return "VK_FORMAT_R12X4G12X4_UNORM_2PACK16"; break;
			case VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16: return "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16"; break;
			case VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16: return "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16"; break;
			case VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16: return "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16"; break;
			case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16: return "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16"; break;
			case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16: return "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16"; break;
			case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16: return "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16"; break;
			case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16: return "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16"; break;
			case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16: return "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16"; break;
			case VK_FORMAT_G16B16G16R16_422_UNORM: return "VK_FORMAT_G16B16G16R16_422_UNORM"; break;
			case VK_FORMAT_B16G16R16G16_422_UNORM: return "VK_FORMAT_B16G16R16G16_422_UNORM"; break;
			case VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM: return "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM"; break;
			case VK_FORMAT_G16_B16R16_2PLANE_420_UNORM: return "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM"; break;
			case VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM: return "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM"; break;
			case VK_FORMAT_G16_B16R16_2PLANE_422_UNORM: return "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM"; break;
			case VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM: return "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM"; break;
			case VK_FORMAT_G8_B8R8_2PLANE_444_UNORM: return "VK_FORMAT_G8_B8R8_2PLANE_444_UNORM"; break;
			case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16: return "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16"; break;
			case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16: return "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16"; break;
			case VK_FORMAT_G16_B16R16_2PLANE_444_UNORM: return "VK_FORMAT_G16_B16R16_2PLANE_444_UNORM"; break;
			case VK_FORMAT_A4R4G4B4_UNORM_PACK16: return "VK_FORMAT_A4R4G4B4_UNORM_PACK16"; break;
			case VK_FORMAT_A4B4G4R4_UNORM_PACK16: return "VK_FORMAT_A4B4G4R4_UNORM_PACK16"; break;
			case VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK: return "VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK"; break;
			case VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK: return "VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK"; break;
			case VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK: return "VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK"; break;
			case VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK: return "VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK"; break;
			case VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK: return "VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK"; break;
			case VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK: return "VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK"; break;
			case VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK: return "VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK"; break;
			case VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK: return "VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK"; break;
			case VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK: return "VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK"; break;
			case VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK: return "VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK"; break;
			case VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK: return "VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK"; break;
			case VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK: return "VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK"; break;
			case VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK: return "VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK"; break;
			case VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK: return "VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK"; break;
			case VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG: return "VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG"; break;
			case VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG: return "VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG"; break;
			case VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG: return "VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG"; break;
			case VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG: return "VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG"; break;
			case VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG: return "VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG"; break;
			case VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG: return "VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG"; break;
			case VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG: return "VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG"; break;
			case VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG: return "VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG"; break;
			//case VK_FORMAT_R16G16_S10_5_NV: return "VK_FORMAT_R16G16_S10_5_NV"; break;
			case VK_FORMAT_MAX_ENUM: return "VK_FORMAT_MAX_ENUM"; break;
			}
		}

		static VkFormat SelectionToEnum(std::string input)
		{
			{
				if (input == "VK_FORMAT_UNDEFINED") return VK_FORMAT_UNDEFINED;
				if (input == "VK_FORMAT_R4G4_UNORM_PACK8") return VK_FORMAT_R4G4_UNORM_PACK8;
				if (input == "VK_FORMAT_R4G4B4A4_UNORM_PACK16") return VK_FORMAT_R4G4B4A4_UNORM_PACK16;
				if (input == "VK_FORMAT_B4G4R4A4_UNORM_PACK16") return VK_FORMAT_B4G4R4A4_UNORM_PACK16;
				if (input == "VK_FORMAT_R5G6B5_UNORM_PACK16") return VK_FORMAT_R5G6B5_UNORM_PACK16;
				if (input == "VK_FORMAT_B5G6R5_UNORM_PACK16") return VK_FORMAT_B5G6R5_UNORM_PACK16;
				if (input == "VK_FORMAT_R5G5B5A1_UNORM_PACK16") return VK_FORMAT_R5G5B5A1_UNORM_PACK16;
				if (input == "VK_FORMAT_B5G5R5A1_UNORM_PACK16") return VK_FORMAT_B5G5R5A1_UNORM_PACK16;
				if (input == "VK_FORMAT_A1R5G5B5_UNORM_PACK16") return VK_FORMAT_A1R5G5B5_UNORM_PACK16;
				if (input == "VK_FORMAT_R8_UNORM") return VK_FORMAT_R8_UNORM;
				if (input == "VK_FORMAT_R8_SNORM") return VK_FORMAT_R8_SNORM;
				if (input == "VK_FORMAT_R8_USCALED") return VK_FORMAT_R8_USCALED;
				if (input == "VK_FORMAT_R8_SSCALED") return VK_FORMAT_R8_SSCALED;
				if (input == "VK_FORMAT_R8_UINT") return VK_FORMAT_R8_UINT;
				if (input == "VK_FORMAT_R8_SINT") return VK_FORMAT_R8_SINT;
				if (input == "VK_FORMAT_R8_SRGB") return VK_FORMAT_R8_SRGB;
				if (input == "VK_FORMAT_R8G8_UNORM") return VK_FORMAT_R8G8_UNORM;
				if (input == "VK_FORMAT_R8G8_SNORM") return VK_FORMAT_R8G8_SNORM;
				if (input == "VK_FORMAT_R8G8_USCALED") return VK_FORMAT_R8G8_USCALED;
				if (input == "VK_FORMAT_R8G8_SSCALED") return VK_FORMAT_R8G8_SSCALED;
				if (input == "VK_FORMAT_R8G8_UINT") return VK_FORMAT_R8G8_UINT;
				if (input == "VK_FORMAT_R8G8_SINT") return VK_FORMAT_R8G8_SINT;
				if (input == "VK_FORMAT_R8G8_SRGB") return VK_FORMAT_R8G8_SRGB;
				if (input == "VK_FORMAT_R8G8B8_UNORM") return VK_FORMAT_R8G8B8_UNORM;
				if (input == "VK_FORMAT_R8G8B8_SNORM") return VK_FORMAT_R8G8B8_SNORM;
				if (input == "VK_FORMAT_R8G8B8_USCALED") return VK_FORMAT_R8G8B8_USCALED;
				if (input == "VK_FORMAT_R8G8B8_SSCALED") return VK_FORMAT_R8G8B8_SSCALED;
				if (input == "VK_FORMAT_R8G8B8_UINT") return VK_FORMAT_R8G8B8_UINT;
				if (input == "VK_FORMAT_R8G8B8_SINT") return VK_FORMAT_R8G8B8_SINT;
				if (input == "VK_FORMAT_R8G8B8_SRGB") return VK_FORMAT_R8G8B8_SRGB;
				if (input == "VK_FORMAT_B8G8R8_UNORM") return VK_FORMAT_B8G8R8_UNORM;
				if (input == "VK_FORMAT_B8G8R8_SNORM") return VK_FORMAT_B8G8R8_SNORM;
				if (input == "VK_FORMAT_B8G8R8_USCALED") return VK_FORMAT_B8G8R8_USCALED;
				if (input == "VK_FORMAT_B8G8R8_SSCALED") return VK_FORMAT_B8G8R8_SSCALED;
				if (input == "VK_FORMAT_B8G8R8_UINT") return VK_FORMAT_B8G8R8_UINT;
				if (input == "VK_FORMAT_B8G8R8_SINT") return VK_FORMAT_B8G8R8_SINT;
				if (input == "VK_FORMAT_B8G8R8_SRGB") return VK_FORMAT_B8G8R8_SRGB;
				if (input == "VK_FORMAT_R8G8B8A8_UNORM") return VK_FORMAT_R8G8B8A8_UNORM;
				if (input == "VK_FORMAT_R8G8B8A8_SNORM") return VK_FORMAT_R8G8B8A8_SNORM;
				if (input == "VK_FORMAT_R8G8B8A8_USCALED") return VK_FORMAT_R8G8B8A8_USCALED;
				if (input == "VK_FORMAT_R8G8B8A8_SSCALED") return VK_FORMAT_R8G8B8A8_SSCALED;
				if (input == "VK_FORMAT_R8G8B8A8_UINT") return VK_FORMAT_R8G8B8A8_UINT;
				if (input == "VK_FORMAT_R8G8B8A8_SINT") return VK_FORMAT_R8G8B8A8_SINT;
				if (input == "VK_FORMAT_R8G8B8A8_SRGB") return VK_FORMAT_R8G8B8A8_SRGB;
				if (input == "VK_FORMAT_B8G8R8A8_UNORM") return VK_FORMAT_B8G8R8A8_UNORM;
				if (input == "VK_FORMAT_B8G8R8A8_SNORM") return VK_FORMAT_B8G8R8A8_SNORM;
				if (input == "VK_FORMAT_B8G8R8A8_USCALED") return VK_FORMAT_B8G8R8A8_USCALED;
				if (input == "VK_FORMAT_B8G8R8A8_SSCALED") return VK_FORMAT_B8G8R8A8_SSCALED;
				if (input == "VK_FORMAT_B8G8R8A8_UINT") return VK_FORMAT_B8G8R8A8_UINT;
				if (input == "VK_FORMAT_B8G8R8A8_SINT") return VK_FORMAT_B8G8R8A8_SINT;
				if (input == "VK_FORMAT_B8G8R8A8_SRGB") return VK_FORMAT_B8G8R8A8_SRGB;
				if (input == "VK_FORMAT_A8B8G8R8_UNORM_PACK32") return VK_FORMAT_A8B8G8R8_UNORM_PACK32;
				if (input == "VK_FORMAT_A8B8G8R8_SNORM_PACK32") return VK_FORMAT_A8B8G8R8_SNORM_PACK32;
				if (input == "VK_FORMAT_A8B8G8R8_USCALED_PACK32") return VK_FORMAT_A8B8G8R8_USCALED_PACK32;
				if (input == "VK_FORMAT_A8B8G8R8_SSCALED_PACK32") return VK_FORMAT_A8B8G8R8_SSCALED_PACK32;
				if (input == "VK_FORMAT_A8B8G8R8_UINT_PACK32") return VK_FORMAT_A8B8G8R8_UINT_PACK32;
				if (input == "VK_FORMAT_A8B8G8R8_SINT_PACK32") return VK_FORMAT_A8B8G8R8_SINT_PACK32;
				if (input == "VK_FORMAT_A8B8G8R8_SRGB_PACK32") return VK_FORMAT_A8B8G8R8_SRGB_PACK32;
				if (input == "VK_FORMAT_A2R10G10B10_UNORM_PACK32") return VK_FORMAT_A2R10G10B10_UNORM_PACK32;
				if (input == "VK_FORMAT_A2R10G10B10_SNORM_PACK32") return VK_FORMAT_A2R10G10B10_SNORM_PACK32;
				if (input == "VK_FORMAT_A2R10G10B10_USCALED_PACK32") return VK_FORMAT_A2R10G10B10_USCALED_PACK32;
				if (input == "VK_FORMAT_A2R10G10B10_SSCALED_PACK32") return VK_FORMAT_A2R10G10B10_SSCALED_PACK32;
				if (input == "VK_FORMAT_A2R10G10B10_UINT_PACK32") return VK_FORMAT_A2R10G10B10_UINT_PACK32;
				if (input == "VK_FORMAT_A2R10G10B10_SINT_PACK32") return VK_FORMAT_A2R10G10B10_SINT_PACK32;
				if (input == "VK_FORMAT_A2B10G10R10_UNORM_PACK32") return VK_FORMAT_A2B10G10R10_UNORM_PACK32;
				if (input == "VK_FORMAT_A2B10G10R10_SNORM_PACK32") return VK_FORMAT_A2B10G10R10_SNORM_PACK32;
				if (input == "VK_FORMAT_A2B10G10R10_USCALED_PACK32") return VK_FORMAT_A2B10G10R10_USCALED_PACK32;
				if (input == "VK_FORMAT_A2B10G10R10_SSCALED_PACK32") return VK_FORMAT_A2B10G10R10_SSCALED_PACK32;
				if (input == "VK_FORMAT_A2B10G10R10_UINT_PACK32") return VK_FORMAT_A2B10G10R10_UINT_PACK32;
				if (input == "VK_FORMAT_A2B10G10R10_SINT_PACK32") return VK_FORMAT_A2B10G10R10_SINT_PACK32;
				if (input == "VK_FORMAT_R16_UNORM") return VK_FORMAT_R16_UNORM;
				if (input == "VK_FORMAT_R16_SNORM") return VK_FORMAT_R16_SNORM;
				if (input == "VK_FORMAT_R16_USCALED") return VK_FORMAT_R16_USCALED;
				if (input == "VK_FORMAT_R16_SSCALED") return VK_FORMAT_R16_SSCALED;
				if (input == "VK_FORMAT_R16_UINT") return VK_FORMAT_R16_UINT;
				if (input == "VK_FORMAT_R16_SINT") return VK_FORMAT_R16_SINT;
				if (input == "VK_FORMAT_R16_SFLOAT") return VK_FORMAT_R16_SFLOAT;
				if (input == "VK_FORMAT_R16G16_UNORM") return VK_FORMAT_R16G16_UNORM;
				if (input == "VK_FORMAT_R16G16_SNORM") return VK_FORMAT_R16G16_SNORM;
				if (input == "VK_FORMAT_R16G16_USCALED") return VK_FORMAT_R16G16_USCALED;
				if (input == "VK_FORMAT_R16G16_SSCALED") return VK_FORMAT_R16G16_SSCALED;
				if (input == "VK_FORMAT_R16G16_UINT") return VK_FORMAT_R16G16_UINT;
				if (input == "VK_FORMAT_R16G16_SINT") return VK_FORMAT_R16G16_SINT;
				if (input == "VK_FORMAT_R16G16_SFLOAT") return VK_FORMAT_R16G16_SFLOAT;
				if (input == "VK_FORMAT_R16G16B16_UNORM") return VK_FORMAT_R16G16B16_UNORM;
				if (input == "VK_FORMAT_R16G16B16_SNORM") return VK_FORMAT_R16G16B16_SNORM;
				if (input == "VK_FORMAT_R16G16B16_USCALED") return VK_FORMAT_R16G16B16_USCALED;
				if (input == "VK_FORMAT_R16G16B16_SSCALED") return VK_FORMAT_R16G16B16_SSCALED;
				if (input == "VK_FORMAT_R16G16B16_UINT") return VK_FORMAT_R16G16B16_UINT;
				if (input == "VK_FORMAT_R16G16B16_SINT") return VK_FORMAT_R16G16B16_SINT;
				if (input == "VK_FORMAT_R16G16B16_SFLOAT") return VK_FORMAT_R16G16B16_SFLOAT;
				if (input == "VK_FORMAT_R16G16B16A16_UNORM") return VK_FORMAT_R16G16B16A16_UNORM;
				if (input == "VK_FORMAT_R16G16B16A16_SNORM") return VK_FORMAT_R16G16B16A16_SNORM;
				if (input == "VK_FORMAT_R16G16B16A16_USCALED") return VK_FORMAT_R16G16B16A16_USCALED;
				if (input == "VK_FORMAT_R16G16B16A16_SSCALED") return VK_FORMAT_R16G16B16A16_SSCALED;
				if (input == "VK_FORMAT_R16G16B16A16_UINT") return VK_FORMAT_R16G16B16A16_UINT;
				if (input == "VK_FORMAT_R16G16B16A16_SINT") return VK_FORMAT_R16G16B16A16_SINT;
				if (input == "VK_FORMAT_R16G16B16A16_SFLOAT") return VK_FORMAT_R16G16B16A16_SFLOAT;
				if (input == "VK_FORMAT_R32_UINT") return VK_FORMAT_R32_UINT;
				if (input == "VK_FORMAT_R32_SINT") return VK_FORMAT_R32_SINT;
				if (input == "VK_FORMAT_R32_SFLOAT") return VK_FORMAT_R32_SFLOAT;
				if (input == "VK_FORMAT_R32G32_UINT") return VK_FORMAT_R32G32_UINT;
				if (input == "VK_FORMAT_R32G32_SINT") return VK_FORMAT_R32G32_SINT;
				if (input == "VK_FORMAT_R32G32_SFLOAT") return VK_FORMAT_R32G32_SFLOAT;
				if (input == "VK_FORMAT_R32G32B32_UINT") return VK_FORMAT_R32G32B32_UINT;
				if (input == "VK_FORMAT_R32G32B32_SINT") return VK_FORMAT_R32G32B32_SINT;
				if (input == "VK_FORMAT_R32G32B32_SFLOAT") return VK_FORMAT_R32G32B32_SFLOAT;
				if (input == "VK_FORMAT_R32G32B32A32_UINT") return VK_FORMAT_R32G32B32A32_UINT;
				if (input == "VK_FORMAT_R32G32B32A32_SINT") return VK_FORMAT_R32G32B32A32_SINT;
				if (input == "VK_FORMAT_R32G32B32A32_SFLOAT") return VK_FORMAT_R32G32B32A32_SFLOAT;
				if (input == "VK_FORMAT_R64_UINT") return VK_FORMAT_R64_UINT;
				if (input == "VK_FORMAT_R64_SINT") return VK_FORMAT_R64_SINT;
				if (input == "VK_FORMAT_R64_SFLOAT") return VK_FORMAT_R64_SFLOAT;
				if (input == "VK_FORMAT_R64G64_UINT") return VK_FORMAT_R64G64_UINT;
				if (input == "VK_FORMAT_R64G64_SINT") return VK_FORMAT_R64G64_SINT;
				if (input == "VK_FORMAT_R64G64_SFLOAT") return VK_FORMAT_R64G64_SFLOAT;
				if (input == "VK_FORMAT_R64G64B64_UINT") return VK_FORMAT_R64G64B64_UINT;
				if (input == "VK_FORMAT_R64G64B64_SINT") return VK_FORMAT_R64G64B64_SINT;
				if (input == "VK_FORMAT_R64G64B64_SFLOAT") return VK_FORMAT_R64G64B64_SFLOAT;
				if (input == "VK_FORMAT_R64G64B64A64_UINT") return VK_FORMAT_R64G64B64A64_UINT;
				if (input == "VK_FORMAT_R64G64B64A64_SINT") return VK_FORMAT_R64G64B64A64_SINT;
				if (input == "VK_FORMAT_R64G64B64A64_SFLOAT") return VK_FORMAT_R64G64B64A64_SFLOAT;
				if (input == "VK_FORMAT_B10G11R11_UFLOAT_PACK32") return VK_FORMAT_B10G11R11_UFLOAT_PACK32;
				if (input == "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32") return VK_FORMAT_E5B9G9R9_UFLOAT_PACK32;
				if (input == "VK_FORMAT_D16_UNORM") return VK_FORMAT_D16_UNORM;
				if (input == "VK_FORMAT_X8_D24_UNORM_PACK32") return VK_FORMAT_X8_D24_UNORM_PACK32;
				if (input == "VK_FORMAT_D32_SFLOAT") return VK_FORMAT_D32_SFLOAT;
				if (input == "VK_FORMAT_S8_UINT") return VK_FORMAT_S8_UINT;
				if (input == "VK_FORMAT_D16_UNORM_S8_UINT") return VK_FORMAT_D16_UNORM_S8_UINT;
				if (input == "VK_FORMAT_D24_UNORM_S8_UINT") return VK_FORMAT_D24_UNORM_S8_UINT;
				if (input == "VK_FORMAT_D32_SFLOAT_S8_UINT") return VK_FORMAT_D32_SFLOAT_S8_UINT;
				if (input == "VK_FORMAT_BC1_RGB_UNORM_BLOCK") return VK_FORMAT_BC1_RGB_UNORM_BLOCK;
				if (input == "VK_FORMAT_BC1_RGB_SRGB_BLOCK") return VK_FORMAT_BC1_RGB_SRGB_BLOCK;
				if (input == "VK_FORMAT_BC1_RGBA_UNORM_BLOCK") return VK_FORMAT_BC1_RGBA_UNORM_BLOCK;
				if (input == "VK_FORMAT_BC1_RGBA_SRGB_BLOCK") return VK_FORMAT_BC1_RGBA_SRGB_BLOCK;
				if (input == "VK_FORMAT_BC2_UNORM_BLOCK") return VK_FORMAT_BC2_UNORM_BLOCK;
				if (input == "VK_FORMAT_BC2_SRGB_BLOCK") return VK_FORMAT_BC2_SRGB_BLOCK;
				if (input == "VK_FORMAT_BC3_UNORM_BLOCK") return VK_FORMAT_BC3_UNORM_BLOCK;
				if (input == "VK_FORMAT_BC3_SRGB_BLOCK") return VK_FORMAT_BC3_SRGB_BLOCK;
				if (input == "VK_FORMAT_BC4_UNORM_BLOCK") return VK_FORMAT_BC4_UNORM_BLOCK;
				if (input == "VK_FORMAT_BC4_SNORM_BLOCK") return VK_FORMAT_BC4_SNORM_BLOCK;
				if (input == "VK_FORMAT_BC5_UNORM_BLOCK") return VK_FORMAT_BC5_UNORM_BLOCK;
				if (input == "VK_FORMAT_BC5_SNORM_BLOCK") return VK_FORMAT_BC5_SNORM_BLOCK;
				if (input == "VK_FORMAT_BC6H_UFLOAT_BLOCK") return VK_FORMAT_BC6H_UFLOAT_BLOCK;
				if (input == "VK_FORMAT_BC6H_SFLOAT_BLOCK") return VK_FORMAT_BC6H_SFLOAT_BLOCK;
				if (input == "VK_FORMAT_BC7_UNORM_BLOCK") return VK_FORMAT_BC7_UNORM_BLOCK;
				if (input == "VK_FORMAT_BC7_SRGB_BLOCK") return VK_FORMAT_BC7_SRGB_BLOCK;
				if (input == "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK") return VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK;
				if (input == "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK") return VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK;
				if (input == "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK") return VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK;
				if (input == "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK") return VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK;
				if (input == "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK") return VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK;
				if (input == "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK") return VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK;
				if (input == "VK_FORMAT_EAC_R11_UNORM_BLOCK") return VK_FORMAT_EAC_R11_UNORM_BLOCK;
				if (input == "VK_FORMAT_EAC_R11_SNORM_BLOCK") return VK_FORMAT_EAC_R11_SNORM_BLOCK;
				if (input == "VK_FORMAT_EAC_R11G11_UNORM_BLOCK") return VK_FORMAT_EAC_R11G11_UNORM_BLOCK;
				if (input == "VK_FORMAT_EAC_R11G11_SNORM_BLOCK") return VK_FORMAT_EAC_R11G11_SNORM_BLOCK;
				if (input == "VK_FORMAT_ASTC_4x4_UNORM_BLOCK") return VK_FORMAT_ASTC_4x4_UNORM_BLOCK;
				if (input == "VK_FORMAT_ASTC_4x4_SRGB_BLOCK") return VK_FORMAT_ASTC_4x4_SRGB_BLOCK;
				if (input == "VK_FORMAT_ASTC_5x4_UNORM_BLOCK") return VK_FORMAT_ASTC_5x4_UNORM_BLOCK;
				if (input == "VK_FORMAT_ASTC_5x4_SRGB_BLOCK") return VK_FORMAT_ASTC_5x4_SRGB_BLOCK;
				if (input == "VK_FORMAT_ASTC_5x5_UNORM_BLOCK") return VK_FORMAT_ASTC_5x5_UNORM_BLOCK;
				if (input == "VK_FORMAT_ASTC_5x5_SRGB_BLOCK") return VK_FORMAT_ASTC_5x5_SRGB_BLOCK;
				if (input == "VK_FORMAT_ASTC_6x5_UNORM_BLOCK") return VK_FORMAT_ASTC_6x5_UNORM_BLOCK;
				if (input == "VK_FORMAT_ASTC_6x5_SRGB_BLOCK") return VK_FORMAT_ASTC_6x5_SRGB_BLOCK;
				if (input == "VK_FORMAT_ASTC_6x6_UNORM_BLOCK") return VK_FORMAT_ASTC_6x6_UNORM_BLOCK;
				if (input == "VK_FORMAT_ASTC_6x6_SRGB_BLOCK") return VK_FORMAT_ASTC_6x6_SRGB_BLOCK;
				if (input == "VK_FORMAT_ASTC_8x5_UNORM_BLOCK") return VK_FORMAT_ASTC_8x5_UNORM_BLOCK;
				if (input == "VK_FORMAT_ASTC_8x5_SRGB_BLOCK") return VK_FORMAT_ASTC_8x5_SRGB_BLOCK;
				if (input == "VK_FORMAT_ASTC_8x6_UNORM_BLOCK") return VK_FORMAT_ASTC_8x6_UNORM_BLOCK;
				if (input == "VK_FORMAT_ASTC_8x6_SRGB_BLOCK") return VK_FORMAT_ASTC_8x6_SRGB_BLOCK;
				if (input == "VK_FORMAT_ASTC_8x8_UNORM_BLOCK") return VK_FORMAT_ASTC_8x8_UNORM_BLOCK;
				if (input == "VK_FORMAT_ASTC_8x8_SRGB_BLOCK") return VK_FORMAT_ASTC_8x8_SRGB_BLOCK;
				if (input == "VK_FORMAT_ASTC_10x5_UNORM_BLOCK") return VK_FORMAT_ASTC_10x5_UNORM_BLOCK;
				if (input == "VK_FORMAT_ASTC_10x5_SRGB_BLOCK") return VK_FORMAT_ASTC_10x5_SRGB_BLOCK;
				if (input == "VK_FORMAT_ASTC_10x6_UNORM_BLOCK") return VK_FORMAT_ASTC_10x6_UNORM_BLOCK;
				if (input == "VK_FORMAT_ASTC_10x6_SRGB_BLOCK") return VK_FORMAT_ASTC_10x6_SRGB_BLOCK;
				if (input == "VK_FORMAT_ASTC_10x8_UNORM_BLOCK") return VK_FORMAT_ASTC_10x8_UNORM_BLOCK;
				if (input == "VK_FORMAT_ASTC_10x8_SRGB_BLOCK") return VK_FORMAT_ASTC_10x8_SRGB_BLOCK;
				if (input == "VK_FORMAT_ASTC_10x10_UNORM_BLOCK") return VK_FORMAT_ASTC_10x10_UNORM_BLOCK;
				if (input == "VK_FORMAT_ASTC_10x10_SRGB_BLOCK") return VK_FORMAT_ASTC_10x10_SRGB_BLOCK;
				if (input == "VK_FORMAT_ASTC_12x10_UNORM_BLOCK") return VK_FORMAT_ASTC_12x10_UNORM_BLOCK;
				if (input == "VK_FORMAT_ASTC_12x10_SRGB_BLOCK") return VK_FORMAT_ASTC_12x10_SRGB_BLOCK;
				if (input == "VK_FORMAT_ASTC_12x12_UNORM_BLOCK") return VK_FORMAT_ASTC_12x12_UNORM_BLOCK;
				if (input == "VK_FORMAT_ASTC_12x12_SRGB_BLOCK") return VK_FORMAT_ASTC_12x12_SRGB_BLOCK;
				if (input == "VK_FORMAT_G8B8G8R8_422_UNORM") return VK_FORMAT_G8B8G8R8_422_UNORM;
				if (input == "VK_FORMAT_B8G8R8G8_422_UNORM") return VK_FORMAT_B8G8R8G8_422_UNORM;
				if (input == "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM") return VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM;
				if (input == "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM") return VK_FORMAT_G8_B8R8_2PLANE_420_UNORM;
				if (input == "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM") return VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM;
				if (input == "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM") return VK_FORMAT_G8_B8R8_2PLANE_422_UNORM;
				if (input == "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM") return VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM;
				if (input == "VK_FORMAT_R10X6_UNORM_PACK16") return VK_FORMAT_R10X6_UNORM_PACK16;
				if (input == "VK_FORMAT_R10X6G10X6_UNORM_2PACK16") return VK_FORMAT_R10X6G10X6_UNORM_2PACK16;
				if (input == "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16") return VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16;
				if (input == "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16") return VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16;
				if (input == "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16") return VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16;
				if (input == "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16") return VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16;
				if (input == "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16") return VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16;
				if (input == "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16") return VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16;
				if (input == "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16") return VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16;
				if (input == "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16") return VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16;
				if (input == "VK_FORMAT_R12X4_UNORM_PACK16") return VK_FORMAT_R12X4_UNORM_PACK16;
				if (input == "VK_FORMAT_R12X4G12X4_UNORM_2PACK16") return VK_FORMAT_R12X4G12X4_UNORM_2PACK16;
				if (input == "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16") return VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16;
				if (input == "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16") return VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16;
				if (input == "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16") return VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16;
				if (input == "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16") return VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16;
				if (input == "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16") return VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16;
				if (input == "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16") return VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16;
				if (input == "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16") return VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16;
				if (input == "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16") return VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16;
				if (input == "VK_FORMAT_G16B16G16R16_422_UNORM") return VK_FORMAT_G16B16G16R16_422_UNORM;
				if (input == "VK_FORMAT_B16G16R16G16_422_UNORM") return VK_FORMAT_B16G16R16G16_422_UNORM;
				if (input == "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM") return VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM;
				if (input == "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM") return VK_FORMAT_G16_B16R16_2PLANE_420_UNORM;
				if (input == "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM") return VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM;
				if (input == "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM") return VK_FORMAT_G16_B16R16_2PLANE_422_UNORM;
				if (input == "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM") return VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM;
				if (input == "VK_FORMAT_G8_B8R8_2PLANE_444_UNORM") return VK_FORMAT_G8_B8R8_2PLANE_444_UNORM;
				if (input == "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16") return VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16;
				if (input == "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16") return VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16;
				if (input == "VK_FORMAT_G16_B16R16_2PLANE_444_UNORM") return VK_FORMAT_G16_B16R16_2PLANE_444_UNORM;
				if (input == "VK_FORMAT_A4R4G4B4_UNORM_PACK16") return VK_FORMAT_A4R4G4B4_UNORM_PACK16;
				if (input == "VK_FORMAT_A4B4G4R4_UNORM_PACK16") return VK_FORMAT_A4B4G4R4_UNORM_PACK16;
				if (input == "VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK") return VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK;
				if (input == "VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK") return VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK;
				if (input == "VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK") return VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK;
				if (input == "VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK") return VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK;
				if (input == "VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK") return VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK;
				if (input == "VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK") return VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK;
				if (input == "VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK") return VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK;
				if (input == "VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK") return VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK;
				if (input == "VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK") return VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK;
				if (input == "VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK") return VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK;
				if (input == "VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK") return VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK;
				if (input == "VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK") return VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK;
				if (input == "VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK") return VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK;
				if (input == "VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK") return VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK;
				if (input == "VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG") return VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG;
				if (input == "VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG") return VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG;
				if (input == "VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG") return VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG;
				if (input == "VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG") return VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG;
				if (input == "VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG") return VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG;
				if (input == "VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG") return VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG;
				if (input == "VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG") return VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG;
				if (input == "VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG") return VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG;
				//if (input == "VK_FORMAT_R16G16_S10_5_NV") return VK_FORMAT_R16G16_S10_5_NV;
				if (input == "VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT") return VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT;
				if (input == "VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT") return VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT;
				if (input == "VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT") return VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT;
				if (input == "VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT") return VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT;
				if (input == "VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT") return VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT;
				if (input == "VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT") return VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT;
				if (input == "VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT") return VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT;
				if (input == "VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT") return VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT;
				if (input == "VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT") return VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT;
				if (input == "VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT") return VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT;
				if (input == "VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT") return VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT;
				if (input == "VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT") return VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT;
				if (input == "VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT") return VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT;
				if (input == "VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT") return VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT;
				if (input == "VK_FORMAT_G8B8G8R8_422_UNORM_KHR") return VK_FORMAT_G8B8G8R8_422_UNORM_KHR;
				if (input == "VK_FORMAT_B8G8R8G8_422_UNORM_KHR") return VK_FORMAT_B8G8R8G8_422_UNORM_KHR;
				if (input == "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR") return VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR;
				if (input == "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR") return VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR;
				if (input == "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR") return VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR;
				if (input == "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR") return VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR;
				if (input == "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR") return VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR;
				if (input == "VK_FORMAT_R10X6_UNORM_PACK16_KHR") return VK_FORMAT_R10X6_UNORM_PACK16_KHR;
				if (input == "VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR") return VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR;
				if (input == "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR") return VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR;
				if (input == "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR") return VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR;
				if (input == "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR") return VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR;
				if (input == "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR") return VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR;
				if (input == "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR") return VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR;
				if (input == "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR") return VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR;
				if (input == "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR") return VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR;
				if (input == "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR") return VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR;
				if (input == "VK_FORMAT_R12X4_UNORM_PACK16_KHR") return VK_FORMAT_R12X4_UNORM_PACK16_KHR;
				if (input == "VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR") return VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR;
				if (input == "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR") return VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR;
				if (input == "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR") return VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR;
				if (input == "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR") return VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR;
				if (input == "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR") return VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR;
				if (input == "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR") return VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR;
				if (input == "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR") return VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR;
				if (input == "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR") return VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR;
				if (input == "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR") return VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR;
				if (input == "VK_FORMAT_G16B16G16R16_422_UNORM_KHR") return VK_FORMAT_G16B16G16R16_422_UNORM_KHR;
				if (input == "VK_FORMAT_B16G16R16G16_422_UNORM_KHR") return VK_FORMAT_B16G16R16G16_422_UNORM_KHR;
				if (input == "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR") return VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR;
				if (input == "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR") return VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR;
				if (input == "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR") return VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR;
				if (input == "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR") return VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR;
				if (input == "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR") return VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR;
				if (input == "VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT") return VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT;
				if (input == "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT") return VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT;
				if (input == "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT") return VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT;
				if (input == "VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT") return VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT;
				if (input == "VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT") return VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT;
				if (input == "VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT") return VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT;
				if (input == "VK_FORMAT_MAX_ENUM") return VK_FORMAT_MAX_ENUM;
			}
		};
	};

	struct DescriptorBindingProperties
	{
		static const char* SelectionToString(DescriptorBindingPropertiesEnum input)
		{
			switch (input)
			{
			case kModelTransformDescriptor: return "kModelTransformDescriptor"; break;
			case kMeshPropertiesDescriptor: return "kMeshPropertiesDescriptor"; break;
			case kTextureDescriptor: return "kTextureDescriptor"; break;
			case kMaterialDescriptor: return "kMaterialDescriptor"; break;
			case kBRDFMapDescriptor: return "kBRDFMapDescriptor"; break;
			case kIrradianceMapDescriptor: return "kIrradianceMapDescriptor"; break;
			case kPrefilterMapDescriptor: return "kPrefilterMapDescriptor"; break;
			case kCubeMapDescriptor: return "kCubeMapDescriptor"; break;
			case kSunLightDescriptor: return "kSunLightDescriptor"; break;
			case kDirectionalLightDescriptor: return "kDirectionalLightDescriptor"; break;
			case kPointLightDescriptor: return "kPointLightDescriptor"; break;
			case kSpotLightDescriptor: return "kSpotLightDescriptor"; break;
			case kReflectionViewDescriptor: return "kReflectionViewDescriptor"; break;
			case kDirectionalShadowDescriptor: return "kDirectionalShadowDescriptor"; break;
			case kPointShadowDescriptor: return "kPointShadowDescriptor"; break;
			case kSpotShadowDescriptor: return "kSpotShadowDescriptor"; break;
			case kViewTextureDescriptor: return "kViewTextureDescriptor"; break;
			case kViewDepthTextureDescriptor: return "kViewDepthTextureDescriptor"; break;
			case kCubeMapSamplerDescriptor: return "kCubeMapSamplerDescriptor"; break;
			default: return "";
			}
		}

		static DescriptorBindingPropertiesEnum SelectionToEnum(std::string input)
		{
			if (input == "kModelTransformDescriptor") return kModelTransformDescriptor;
			if (input == "kMeshPropertiesDescriptor") return kMeshPropertiesDescriptor;
			if (input == "kTextureDescriptor") return kTextureDescriptor;
			if (input == "kMaterialDescriptor") return kMaterialDescriptor;
			if (input == "kBRDFMapDescriptor") return kBRDFMapDescriptor;
			if (input == "kIrradianceMapDescriptor") return kIrradianceMapDescriptor;
			if (input == "kPrefilterMapDescriptor") return kPrefilterMapDescriptor;
			if (input == "kCubeMapDescriptor") return kCubeMapDescriptor;
			if (input == "kSunLightDescriptor") return kSunLightDescriptor;
			if (input == "kDirectionalLightDescriptor") return kDirectionalLightDescriptor;
			if (input == "kPointLightDescriptor") return kPointLightDescriptor;
			if (input == "kSpotLightDescriptor") return kSpotLightDescriptor;
			if (input == "kReflectionViewDescriptor") return kReflectionViewDescriptor;
			if (input == "kDirectionalShadowDescriptor") return kDirectionalShadowDescriptor;
			if (input == "kPointShadowDescriptor") return kPointShadowDescriptor;
			if (input == "kSpotShadowDescriptor") return kSpotShadowDescriptor;
			if (input == "kViewTextureDescriptor") return kViewTextureDescriptor;
			if (input == "kViewDepthTextureDescriptor") return kViewDepthTextureDescriptor;
			if (input == "kCubeMapSamplerDescriptor") return kCubeMapSamplerDescriptor;
		}
	};

	const char* PrimitiveTopologyEnumList[10] = { "VK_PRIMITIVE_TOPOLOGY_POINT_LIST",
												  "VK_PRIMITIVE_TOPOLOGY_LINE_LIST"
												  "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP",
												  "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST",
												  "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP",
												  "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN",
												  "VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY",
												  "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY",
												  "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY",
												  "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY",
												  "VK_PRIMITIVE_TOPOLOGY_MAX_ENUM" };

	struct PrimitiveTopology
	{
		static const char* SelectionToString(VkPrimitiveTopology input)
		{
			switch (input)
			{
			case VK_PRIMITIVE_TOPOLOGY_POINT_LIST: return "VK_PRIMITIVE_TOPOLOGY_POINT_LIST"; break;
			case VK_PRIMITIVE_TOPOLOGY_LINE_LIST: return "VK_PRIMITIVE_TOPOLOGY_LINE_LIST"; break;
			case VK_PRIMITIVE_TOPOLOGY_LINE_STRIP: return "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP"; break;
			case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST: return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST"; break;
			case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP: return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP"; break;
			case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN: return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN"; break;
			case VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY: return "VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY"; break;
			case VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY: return "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY"; break;
			case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY: return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY"; break;
			case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY: return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY"; break;
			case VK_PRIMITIVE_TOPOLOGY_PATCH_LIST: return "VK_PRIMITIVE_TOPOLOGY_PATCH_LIST"; break;
			case VK_PRIMITIVE_TOPOLOGY_MAX_ENUM: return "VK_PRIMITIVE_TOPOLOGY_MAX_ENUM"; break;
			default: return "";
			}
		}

		static VkPrimitiveTopology SelectionToEnum(std::string input)
		{
			if (input == "VK_PRIMITIVE_TOPOLOGY_POINT_LIST") return VK_PRIMITIVE_TOPOLOGY_POINT_LIST;
			if (input == "VK_PRIMITIVE_TOPOLOGY_LINE_LIST") return VK_PRIMITIVE_TOPOLOGY_LINE_LIST;
			if (input == "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP") return VK_PRIMITIVE_TOPOLOGY_LINE_STRIP;
			if (input == "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST") return VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;
			if (input == "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP") return VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP;
			if (input == "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN") return VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN;
			if (input == "VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY") return VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY;
			if (input == "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY") return VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY;
			if (input == "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY") return VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY;
			if (input == "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY") return VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY;
			if (input == "VK_PRIMITIVE_TOPOLOGY_PATCH_LIST") return VK_PRIMITIVE_TOPOLOGY_PATCH_LIST;
			if (input == "VK_PRIMITIVE_TOPOLOGY_MAX_ENUM") return VK_PRIMITIVE_TOPOLOGY_MAX_ENUM;
		}
	};

	const char* DepthCompareOpperationEnumList[9] = { "VK_COMPARE_OP_NEVER",
													"VK_COMPARE_OP_LESS",
													"VK_COMPARE_OP_EQUAL",
													"VK_COMPARE_OP_LESS_OR_EQUAL",
													"VK_COMPARE_OP_GREATER",
													"VK_COMPARE_OP_NOT_EQUAL",
													"VK_COMPARE_OP_GREATER_OR_EQUAL",
													"VK_COMPARE_OP_ALWAYS",
													"VK_COMPARE_OP_MAX_ENUM" };

	struct CompareOpperation
	{
		static const char* SelectionToString(VkCompareOp input)
		{
			switch (input)
			{
			case VK_COMPARE_OP_NEVER: return "VK_COMPARE_OP_NEVER"; break;
			case VK_COMPARE_OP_LESS: return "VK_COMPARE_OP_LESS"; break;
			case VK_COMPARE_OP_EQUAL: return "VK_COMPARE_OP_EQUAL"; break;
			case VK_COMPARE_OP_LESS_OR_EQUAL: return "VK_COMPARE_OP_LESS_OR_EQUAL"; break;
			case VK_COMPARE_OP_GREATER: return "VK_COMPARE_OP_GREATER"; break;
			case VK_COMPARE_OP_NOT_EQUAL: return "VK_COMPARE_OP_NOT_EQUAL"; break;
			case VK_COMPARE_OP_GREATER_OR_EQUAL: return "VK_COMPARE_OP_GREATER_OR_EQUAL"; break;
			case VK_COMPARE_OP_ALWAYS: return "VK_COMPARE_OP_ALWAYS"; break;
			case VK_COMPARE_OP_MAX_ENUM: return "VK_COMPARE_OP_MAX_ENUM"; break;
			default: return "";
			}
		}

		static VkCompareOp SelectionToEnum(std::string input)
		{
			if (input == "VK_COMPARE_OP_NEVER") return VK_COMPARE_OP_NEVER;
			if (input == "VK_COMPARE_OP_LESS") return VK_COMPARE_OP_LESS;
			if (input == "VK_COMPARE_OP_EQUAL") return VK_COMPARE_OP_EQUAL;
			if (input == "VK_COMPARE_OP_LESS_OR_EQUAL") return VK_COMPARE_OP_LESS_OR_EQUAL;
			if (input == "VK_COMPARE_OP_GREATER") return VK_COMPARE_OP_GREATER;
			if (input == "VK_COMPARE_OP_NOT_EQUAL") return VK_COMPARE_OP_NOT_EQUAL;
			if (input == "VK_COMPARE_OP_GREATER_OR_EQUAL") return VK_COMPARE_OP_GREATER_OR_EQUAL;
			if (input == "VK_COMPARE_OP_ALWAYS") return VK_COMPARE_OP_ALWAYS;
			if (input == "VK_COMPARE_OP_MAX_ENUM") return VK_COMPARE_OP_MAX_ENUM;
		}
	};

	const char* FrontFaceEnumList[2] = { "VK_FRONT_FACE_COUNTER_CLOCKWISE",
										 "VK_FRONT_FACE_CLOCKWISE" };

	struct FrontFace
	{
		static const char* SelectionToString(VkFrontFace input)
		{
			switch (input)
			{
			case VK_FRONT_FACE_COUNTER_CLOCKWISE: return "VK_FRONT_FACE_COUNTER_CLOCKWISE"; break;
			case VK_FRONT_FACE_CLOCKWISE: return "VK_FRONT_FACE_CLOCKWISE"; break;
			case VK_FRONT_FACE_MAX_ENUM: return "VK_FRONT_FACE_MAX_ENUM"; break;
			}
		}

		static VkFrontFace SelectionToEnum(std::string input)
		{
			if (input == "VK_FRONT_FACE_COUNTER_CLOCKWISE") return VK_FRONT_FACE_COUNTER_CLOCKWISE;
			if (input == "VK_FRONT_FACE_CLOCKWISE") return VK_FRONT_FACE_CLOCKWISE;
			if (input == "VK_FRONT_FACE_MAX_ENUM") return VK_FRONT_FACE_MAX_ENUM;
		}
	};

	const char* CullModeEnumList[5] = { "VK_CULL_MODE_NONE",
										"VK_CULL_MODE_FRONT_BIT",
										"VK_CULL_MODE_BACK_BIT",
										"VK_CULL_MODE_FRONT_AND_BACK",
										"VK_CULL_MODE_FLAG_BITS_MAX_ENUM" };
	struct CullMode
	{
		static const char* SelectionToString(VkCullModeFlagBits input)
		{
			switch (input)
			{
			case VK_CULL_MODE_NONE: return "VK_CULL_MODE_NONE"; break;
			case VK_CULL_MODE_FRONT_BIT: return "VK_CULL_MODE_FRONT_BIT"; break;
			case VK_CULL_MODE_BACK_BIT: return "VK_CULL_MODE_BACK_BIT"; break;
			case VK_CULL_MODE_FRONT_AND_BACK: return "VK_CULL_MODE_FRONT_AND_BACK"; break;
			case VK_CULL_MODE_FLAG_BITS_MAX_ENUM: return "VK_CULL_MODE_FLAG_BITS_MAX_ENUM"; break;
			}
		}

		static VkCullModeFlagBits SelectionToEnum(std::string input)
		{
			if (input == "VK_CULL_MODE_NONE") return VK_CULL_MODE_NONE;
			if (input == "VK_CULL_MODE_FRONT_BIT") return VK_CULL_MODE_FRONT_BIT;
			if (input == "VK_CULL_MODE_BACK_BIT") return VK_CULL_MODE_BACK_BIT;
			if (input == "VK_CULL_MODE_FRONT_AND_BACK") return VK_CULL_MODE_FRONT_AND_BACK;
			if (input == "VK_CULL_MODE_FLAG_BITS_MAX_ENUM") return VK_CULL_MODE_FLAG_BITS_MAX_ENUM;
		}
	};

	const char* PolygonModeEnumList[5] = { "VK_POLYGON_MODE_FILL",
											"VK_POLYGON_MODE_LINE",
											"VK_POLYGON_MODE_POINT",
											"VK_POLYGON_MODE_FILL_RECTANGLE_NV",
											"VK_POLYGON_MODE_MAX_ENUM" };

	struct PolygonMode
	{
		static const char* SelectionToString(VkPolygonMode input)
		{
			switch (input)
			{
			case VK_POLYGON_MODE_FILL: return "VK_POLYGON_MODE_FILL"; break;
			case VK_POLYGON_MODE_LINE: return "VK_POLYGON_MODE_LINE"; break;
			case VK_POLYGON_MODE_POINT: return "VK_POLYGON_MODE_POINT"; break;
			case VK_POLYGON_MODE_FILL_RECTANGLE_NV: return "VK_POLYGON_MODE_FILL_RECTANGLE_NV"; break;
			case VK_POLYGON_MODE_MAX_ENUM: return "VK_POLYGON_MODE_MAX_ENUM"; break;
			}
		}

		static VkPolygonMode SelectionToEnum(std::string input)
		{
			if (input == "VK_POLYGON_MODE_FILL") return VK_POLYGON_MODE_FILL;
			if (input == "VK_POLYGON_MODE_LINE") return VK_POLYGON_MODE_LINE;
			if (input == "VK_POLYGON_MODE_POINT") return VK_POLYGON_MODE_POINT;
			if (input == "VK_POLYGON_MODE_FILL_RECTANGLE_NV") return VK_POLYGON_MODE_FILL_RECTANGLE_NV;
			if (input == "VK_POLYGON_MODE_MAX_ENUM") return VK_POLYGON_MODE_MAX_ENUM;
		}
	};

	const char* BlendFactorEnumList[20] = { "VK_BLEND_FACTOR_ZERO",
											"VK_BLEND_FACTOR_ONE",
											"VK_BLEND_FACTOR_SRC_COLOR",
											"VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR",
											"VK_BLEND_FACTOR_DST_COLOR",
											"VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR",
											"VK_BLEND_FACTOR_SRC_ALPHA",
											"VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA",
											"VK_BLEND_FACTOR_DST_ALPHA",
											"VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA",
											"VK_BLEND_FACTOR_CONSTANT_COLOR",
											"VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR",
											"VK_BLEND_FACTOR_CONSTANT_ALPHA",
											"VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA",
											"VK_BLEND_FACTOR_SRC_ALPHA_SATURATE",
											"VK_BLEND_FACTOR_SRC1_COLOR",
											"VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR",
											"VK_BLEND_FACTOR_SRC1_ALPHA",
											"VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA",
											"VK_BLEND_FACTOR_MAX_ENUM" };

	struct BlendFactorMode
	{
		static const char* SelectionToString(VkBlendFactor input)
		{
			switch (input)
			{
			case VK_BLEND_FACTOR_ZERO: return "VK_BLEND_FACTOR_ZERO"; break;
			case VK_BLEND_FACTOR_ONE: return "VK_BLEND_FACTOR_ONE"; break;
			case VK_BLEND_FACTOR_SRC_COLOR: return "VK_BLEND_FACTOR_SRC_COLOR"; break;
			case VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR: return "VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR"; break;
			case VK_BLEND_FACTOR_DST_COLOR: return "VK_BLEND_FACTOR_DST_COLOR"; break;
			case VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR: return "VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR"; break;
			case VK_BLEND_FACTOR_SRC_ALPHA: return "VK_BLEND_FACTOR_SRC_ALPHA"; break;
			case VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA: return "VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA"; break;
			case VK_BLEND_FACTOR_DST_ALPHA: return "VK_BLEND_FACTOR_DST_ALPHA"; break;
			case VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA: return "VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA"; break;
			case VK_BLEND_FACTOR_CONSTANT_COLOR: return "VK_BLEND_FACTOR_CONSTANT_COLOR"; break;
			case VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR: return "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR"; break;
			case VK_BLEND_FACTOR_CONSTANT_ALPHA: return "VK_BLEND_FACTOR_CONSTANT_ALPHA"; break;
			case VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA: return "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA"; break;
			case VK_BLEND_FACTOR_SRC_ALPHA_SATURATE: return "VK_BLEND_FACTOR_SRC_ALPHA_SATURATE"; break;
			case VK_BLEND_FACTOR_SRC1_COLOR: return "VK_BLEND_FACTOR_SRC1_COLOR"; break;
			case VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR: return "VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR"; break;
			case VK_BLEND_FACTOR_SRC1_ALPHA: return "VK_BLEND_FACTOR_SRC1_ALPHA"; break;
			case VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA: return "VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA"; break;
			case VK_BLEND_FACTOR_MAX_ENUM: return "VK_BLEND_FACTOR_MAX_ENUM"; break;
			}
		}

		static VkBlendFactor SelectionToEnum(std::string input)
		{
			if (input == "VK_BLEND_FACTOR_ZERO") return VK_BLEND_FACTOR_ZERO;
			if (input == "VK_BLEND_FACTOR_ONE") return VK_BLEND_FACTOR_ONE;
			if (input == "VK_BLEND_FACTOR_SRC_COLOR") return VK_BLEND_FACTOR_SRC_COLOR;
			if (input == "VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR") return VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR;
			if (input == "VK_BLEND_FACTOR_DST_COLOR") return VK_BLEND_FACTOR_DST_COLOR;
			if (input == "VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR") return VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR;
			if (input == "VK_BLEND_FACTOR_SRC_ALPHA") return VK_BLEND_FACTOR_SRC_ALPHA;
			if (input == "VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA") return VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;
			if (input == "VK_BLEND_FACTOR_DST_ALPHA") return VK_BLEND_FACTOR_DST_ALPHA;
			if (input == "VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA") return VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA;
			if (input == "VK_BLEND_FACTOR_CONSTANT_COLOR") return VK_BLEND_FACTOR_CONSTANT_COLOR;
			if (input == "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR") return VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR;
			if (input == "VK_BLEND_FACTOR_CONSTANT_ALPHA") return VK_BLEND_FACTOR_CONSTANT_ALPHA;
			if (input == "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA") return VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA;
			if (input == "VK_BLEND_FACTOR_SRC_ALPHA_SATURATE") return VK_BLEND_FACTOR_SRC_ALPHA_SATURATE;
			if (input == "VK_BLEND_FACTOR_SRC1_COLOR") return VK_BLEND_FACTOR_SRC1_COLOR;
			if (input == "VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR") return VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR;
			if (input == "VK_BLEND_FACTOR_SRC1_ALPHA") return VK_BLEND_FACTOR_SRC1_ALPHA;
			if (input == "VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA") return VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA;
			if (input == "VK_BLEND_FACTOR_MAX_ENUM") return VK_BLEND_FACTOR_MAX_ENUM;
		}
	};

	const char* BlendOpEnumList[52] = { "VK_BLEND_OP_ADD",
										"VK_BLEND_OP_SUBTRACT",
										"VK_BLEND_OP_REVERSE_SUBTRACT",
										"VK_BLEND_OP_MIN",
										"VK_BLEND_OP_MAX",
										"VK_BLEND_OP_ZERO_EXT",
										"VK_BLEND_OP_SRC_EXT",
										"VK_BLEND_OP_DST_EXT",
										"VK_BLEND_OP_SRC_OVER_EXT",
										"VK_BLEND_OP_DST_OVER_EXT",
										"VK_BLEND_OP_SRC_IN_EXT",
										"VK_BLEND_OP_DST_IN_EXT",
										"VK_BLEND_OP_SRC_OUT_EXT",
										"VK_BLEND_OP_DST_OUT_EXT",
										"VK_BLEND_OP_SRC_ATOP_EXT",
										"VK_BLEND_OP_DST_ATOP_EXT",
										"VK_BLEND_OP_XOR_EXT",
										"VK_BLEND_OP_MULTIPLY_EXT",
										"VK_BLEND_OP_SCREEN_EXT",
										"VK_BLEND_OP_OVERLAY_EXT",
										"VK_BLEND_OP_DARKEN_EXT",
										"VK_BLEND_OP_LIGHTEN_EXT",
										"VK_BLEND_OP_COLORDODGE_EXT",
										"VK_BLEND_OP_COLORBURN_EXT",
										"VK_BLEND_OP_HARDLIGHT_EXT",
										"VK_BLEND_OP_SOFTLIGHT_EXT",
										"VK_BLEND_OP_DIFFERENCE_EXT",
										"VK_BLEND_OP_EXCLUSION_EXT",
										"VK_BLEND_OP_INVERT_EXT",
										"VK_BLEND_OP_INVERT_RGB_EXT",
										"VK_BLEND_OP_LINEARDODGE_EXT",
										"VK_BLEND_OP_LINEARBURN_EXT",
										"VK_BLEND_OP_VIVIDLIGHT_EXT",
										"VK_BLEND_OP_LINEARLIGHT_EXT",
										"VK_BLEND_OP_PINLIGHT_EXT",
										"VK_BLEND_OP_HARDMIX_EXT",
										"VK_BLEND_OP_HSL_HUE_EXT",
										"VK_BLEND_OP_HSL_SATURATION_EXT",
										"VK_BLEND_OP_HSL_COLOR_EXT",
										"VK_BLEND_OP_HSL_LUMINOSITY_EXT",
										"VK_BLEND_OP_PLUS_EXT",
										"VK_BLEND_OP_PLUS_CLAMPED_EXT",
										"VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT",
										"VK_BLEND_OP_PLUS_DARKER_EXT",
										"VK_BLEND_OP_MINUS_EXT",
										"VK_BLEND_OP_MINUS_CLAMPED_EXT",
										"VK_BLEND_OP_CONTRAST_EXT",
										"VK_BLEND_OP_INVERT_OVG_EXT",
										"VK_BLEND_OP_RED_EXT",
										"VK_BLEND_OP_GREEN_EXT",
										"VK_BLEND_OP_BLUE_EXT",
										"VK_BLEND_OP_MAX_ENUM" };

	struct BlendOpMode
	{
		static const char* SelectionToString(VkBlendOp input)
		{
			switch (input)
			{
			case VK_BLEND_OP_ADD: return "VK_BLEND_OP_ADD"; break;
			case VK_BLEND_OP_SUBTRACT: return "VK_BLEND_OP_SUBTRACT"; break;
			case VK_BLEND_OP_REVERSE_SUBTRACT: return "VK_BLEND_OP_REVERSE_SUBTRACT"; break;
			case VK_BLEND_OP_MIN: return "VK_BLEND_OP_MIN"; break;
			case VK_BLEND_OP_MAX: return "VK_BLEND_OP_MAX"; break;
			case VK_BLEND_OP_ZERO_EXT: return "VK_BLEND_OP_ZERO_EXT"; break;
			case VK_BLEND_OP_SRC_EXT: return "VK_BLEND_OP_SRC_EXT"; break;
			case VK_BLEND_OP_DST_EXT: return "VK_BLEND_OP_DST_EXT"; break;
			case VK_BLEND_OP_SRC_OVER_EXT: return "VK_BLEND_OP_SRC_OVER_EXT"; break;
			case VK_BLEND_OP_DST_OVER_EXT: return "VK_BLEND_OP_DST_OVER_EXT"; break;
			case VK_BLEND_OP_SRC_IN_EXT: return "VK_BLEND_OP_SRC_IN_EXT"; break;
			case VK_BLEND_OP_DST_IN_EXT: return "VK_BLEND_OP_DST_IN_EXT"; break;
			case VK_BLEND_OP_SRC_OUT_EXT: return "VK_BLEND_OP_SRC_OUT_EXT"; break;
			case VK_BLEND_OP_DST_OUT_EXT: return "VK_BLEND_OP_DST_OUT_EXT"; break;
			case VK_BLEND_OP_SRC_ATOP_EXT: return "VK_BLEND_OP_SRC_ATOP_EXT"; break;
			case VK_BLEND_OP_DST_ATOP_EXT: return "VK_BLEND_OP_DST_ATOP_EXT"; break;
			case VK_BLEND_OP_XOR_EXT: return "VK_BLEND_OP_XOR_EXT"; break;
			case VK_BLEND_OP_MULTIPLY_EXT: return "VK_BLEND_OP_MULTIPLY_EXT"; break;
			case VK_BLEND_OP_SCREEN_EXT: return "VK_BLEND_OP_SCREEN_EXT"; break;
			case VK_BLEND_OP_OVERLAY_EXT: return "VK_BLEND_OP_OVERLAY_EXT"; break;
			case VK_BLEND_OP_DARKEN_EXT: return "VK_BLEND_OP_DARKEN_EXT"; break;
			case VK_BLEND_OP_LIGHTEN_EXT: return "VK_BLEND_OP_LIGHTEN_EXT"; break;
			case VK_BLEND_OP_COLORDODGE_EXT: return "VK_BLEND_OP_COLORDODGE_EXT"; break;
			case VK_BLEND_OP_COLORBURN_EXT: return "VK_BLEND_OP_COLORBURN_EXT"; break;
			case VK_BLEND_OP_HARDLIGHT_EXT: return "VK_BLEND_OP_HARDLIGHT_EXT"; break;
			case VK_BLEND_OP_SOFTLIGHT_EXT: return "VK_BLEND_OP_SOFTLIGHT_EXT"; break;
			case VK_BLEND_OP_DIFFERENCE_EXT: return "VK_BLEND_OP_DIFFERENCE_EXT"; break;
			case VK_BLEND_OP_EXCLUSION_EXT: return "VK_BLEND_OP_EXCLUSION_EXT"; break;
			case VK_BLEND_OP_INVERT_EXT: return "VK_BLEND_OP_INVERT_EXT"; break;
			case VK_BLEND_OP_INVERT_RGB_EXT: return "VK_BLEND_OP_INVERT_RGB_EXT"; break;
			case VK_BLEND_OP_LINEARDODGE_EXT: return "VK_BLEND_OP_LINEARDODGE_EXT"; break;
			case VK_BLEND_OP_LINEARBURN_EXT: return "VK_BLEND_OP_LINEARBURN_EXT"; break;
			case VK_BLEND_OP_VIVIDLIGHT_EXT: return "VK_BLEND_OP_VIVIDLIGHT_EXT"; break;
			case VK_BLEND_OP_LINEARLIGHT_EXT: return "VK_BLEND_OP_LINEARLIGHT_EXT"; break;
			case VK_BLEND_OP_PINLIGHT_EXT: return "VK_BLEND_OP_PINLIGHT_EXT"; break;
			case VK_BLEND_OP_HARDMIX_EXT: return "VK_BLEND_OP_HARDMIX_EXT"; break;
			case VK_BLEND_OP_HSL_HUE_EXT: return "VK_BLEND_OP_HSL_HUE_EXT"; break;
			case VK_BLEND_OP_HSL_SATURATION_EXT: return "VK_BLEND_OP_HSL_SATURATION_EXT"; break;
			case VK_BLEND_OP_HSL_COLOR_EXT: return "VK_BLEND_OP_HSL_COLOR_EXT"; break;
			case VK_BLEND_OP_HSL_LUMINOSITY_EXT: return "VK_BLEND_OP_HSL_LUMINOSITY_EXT"; break;
			case VK_BLEND_OP_PLUS_EXT: return "VK_BLEND_OP_PLUS_EXT"; break;
			case VK_BLEND_OP_PLUS_CLAMPED_EXT: return "VK_BLEND_OP_PLUS_CLAMPED_EXT"; break;
			case VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT: return "VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT"; break;
			case VK_BLEND_OP_PLUS_DARKER_EXT: return "VK_BLEND_OP_PLUS_DARKER_EXT"; break;
			case VK_BLEND_OP_MINUS_EXT: return "VK_BLEND_OP_MINUS_EXT"; break;
			case VK_BLEND_OP_MINUS_CLAMPED_EXT: return "VK_BLEND_OP_MINUS_CLAMPED_EXT"; break;
			case VK_BLEND_OP_CONTRAST_EXT: return "VK_BLEND_OP_CONTRAST_EXT"; break;
			case VK_BLEND_OP_INVERT_OVG_EXT: return "VK_BLEND_OP_INVERT_OVG_EXT"; break;
			case VK_BLEND_OP_RED_EXT: return "VK_BLEND_OP_RED_EXT"; break;
			case VK_BLEND_OP_GREEN_EXT: return "VK_BLEND_OP_GREEN_EXT"; break;
			case VK_BLEND_OP_BLUE_EXT: return "VK_BLEND_OP_BLUE_EXT"; break;
			case VK_BLEND_OP_MAX_ENUM: return "VK_BLEND_OP_MAX_ENUM"; break;
			}
		}

		static VkBlendOp SelectionToEnum(std::string input)
		{
			if (input == "VK_BLEND_OP_ADD") return VK_BLEND_OP_ADD;
			if (input == "VK_BLEND_OP_SUBTRACT") return VK_BLEND_OP_SUBTRACT;
			if (input == "VK_BLEND_OP_REVERSE_SUBTRACT") return VK_BLEND_OP_REVERSE_SUBTRACT;
			if (input == "VK_BLEND_OP_MIN") return VK_BLEND_OP_MIN;
			if (input == "VK_BLEND_OP_MAX") return VK_BLEND_OP_MAX;
			if (input == "VK_BLEND_OP_ZERO_EXT") return VK_BLEND_OP_ZERO_EXT;
			if (input == "VK_BLEND_OP_SRC_EXT") return VK_BLEND_OP_SRC_EXT;
			if (input == "VK_BLEND_OP_DST_EXT") return VK_BLEND_OP_DST_EXT;
			if (input == "VK_BLEND_OP_SRC_OVER_EXT") return VK_BLEND_OP_SRC_OVER_EXT;
			if (input == "VK_BLEND_OP_DST_OVER_EXT") return VK_BLEND_OP_DST_OVER_EXT;
			if (input == "VK_BLEND_OP_SRC_IN_EXT") return VK_BLEND_OP_SRC_IN_EXT;
			if (input == "VK_BLEND_OP_DST_IN_EXT") return VK_BLEND_OP_DST_IN_EXT;
			if (input == "VK_BLEND_OP_SRC_OUT_EXT") return VK_BLEND_OP_SRC_OUT_EXT;
			if (input == "VK_BLEND_OP_SRC_ATOP_EXT") return VK_BLEND_OP_SRC_ATOP_EXT;
			if (input == "VK_BLEND_OP_DST_ATOP_EXT") return VK_BLEND_OP_DST_ATOP_EXT;
			if (input == "VK_BLEND_OP_XOR_EXT") return VK_BLEND_OP_XOR_EXT;
			if (input == "VK_BLEND_OP_MULTIPLY_EXT") return VK_BLEND_OP_MULTIPLY_EXT;
			if (input == "VK_BLEND_OP_SCREEN_EXT") return VK_BLEND_OP_SCREEN_EXT;
			if (input == "VK_BLEND_OP_OVERLAY_EXT") return VK_BLEND_OP_OVERLAY_EXT;
			if (input == "VK_BLEND_OP_DARKEN_EXT") return VK_BLEND_OP_DARKEN_EXT;
			if (input == "VK_BLEND_OP_LIGHTEN_EXT") return VK_BLEND_OP_LIGHTEN_EXT;
			if (input == "VK_BLEND_OP_COLORDODGE_EXT") return VK_BLEND_OP_COLORDODGE_EXT;
			if (input == "VK_BLEND_OP_COLORBURN_EXT") return VK_BLEND_OP_COLORBURN_EXT;
			if (input == "VK_BLEND_OP_HARDLIGHT_EXT") return VK_BLEND_OP_HARDLIGHT_EXT;
			if (input == "VK_BLEND_OP_SOFTLIGHT_EXT") return VK_BLEND_OP_SOFTLIGHT_EXT;
			if (input == "VK_BLEND_OP_DIFFERENCE_EXT") return VK_BLEND_OP_DIFFERENCE_EXT;
			if (input == "VK_BLEND_OP_EXCLUSION_EXT") return VK_BLEND_OP_EXCLUSION_EXT;
			if (input == "VK_BLEND_OP_INVERT_EXT") return VK_BLEND_OP_INVERT_EXT;
			if (input == "VK_BLEND_OP_INVERT_RGB_EXT") return VK_BLEND_OP_INVERT_RGB_EXT;
			if (input == "VK_BLEND_OP_LINEARDODGE_EXT") return VK_BLEND_OP_LINEARDODGE_EXT;
			if (input == "VK_BLEND_OP_LINEARBURN_EXT") return VK_BLEND_OP_LINEARBURN_EXT;
			if (input == "VK_BLEND_OP_VIVIDLIGHT_EXT") return VK_BLEND_OP_VIVIDLIGHT_EXT;
			if (input == "VK_BLEND_OP_LINEARLIGHT_EXT") return VK_BLEND_OP_LINEARLIGHT_EXT;
			if (input == "VK_BLEND_OP_PINLIGHT_EXT") return VK_BLEND_OP_PINLIGHT_EXT;
			if (input == "VK_BLEND_OP_HARDMIX_EXT") return VK_BLEND_OP_HARDMIX_EXT;
			if (input == "VK_BLEND_OP_HSL_HUE_EXT") return VK_BLEND_OP_HSL_HUE_EXT;
			if (input == "VK_BLEND_OP_HSL_SATURATION_EXT") return VK_BLEND_OP_HSL_SATURATION_EXT;
			if (input == "VK_BLEND_OP_HSL_COLOR_EXT") return VK_BLEND_OP_HSL_COLOR_EXT;
			if (input == "VK_BLEND_OP_HSL_LUMINOSITY_EXT") return VK_BLEND_OP_HSL_LUMINOSITY_EXT;
			if (input == "VK_BLEND_OP_PLUS_EXT") return VK_BLEND_OP_PLUS_EXT;
			if (input == "VK_BLEND_OP_PLUS_CLAMPED_EXT") return VK_BLEND_OP_PLUS_CLAMPED_EXT;
			if (input == "VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT") return VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT;
			if (input == "VK_BLEND_OP_PLUS_DARKER_EXT") return VK_BLEND_OP_PLUS_DARKER_EXT;
			if (input == "VK_BLEND_OP_MINUS_EXT") return VK_BLEND_OP_MINUS_EXT;
			if (input == "VK_BLEND_OP_MINUS_CLAMPED_EXT") return VK_BLEND_OP_MINUS_CLAMPED_EXT;
			if (input == "VK_BLEND_OP_CONTRAST_EXT") return VK_BLEND_OP_CONTRAST_EXT;
			if (input == "VK_BLEND_OP_INVERT_OVG_EXT") return VK_BLEND_OP_INVERT_OVG_EXT;
			if (input == "VK_BLEND_OP_RED_EXT") return VK_BLEND_OP_RED_EXT;
			if (input == "VK_BLEND_OP_GREEN_EXT") return VK_BLEND_OP_GREEN_EXT;
			if (input == "VK_BLEND_OP_BLUE_EXT") return VK_BLEND_OP_BLUE_EXT;
			if (input == "VK_BLEND_OP_MAX_ENUM") return VK_BLEND_OP_MAX_ENUM;
		}
	};
}

#endif